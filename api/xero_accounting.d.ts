/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/Accounts": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves the full chart of accounts */
        get: operations["getAccounts"];
        /** Creates a new chart of accounts */
        put: operations["createAccount"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Accounts/{AccountID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a single chart of accounts by using a unique account Id */
        get: operations["getAccount"];
        put?: never;
        /** Updates a chart of accounts */
        post: operations["updateAccount"];
        /** Deletes a chart of accounts */
        delete: operations["deleteAccount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Accounts/{AccountID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments for a specific accounts by using a unique account Id */
        get: operations["getAccountAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Accounts/{AccountID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific account using a unique attachment Id */
        get: operations["getAccountAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Accounts/{AccountID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves an attachment for a specific account by filename */
        get: operations["getAccountAttachmentByFileName"];
        /** Creates an attachment on a specific account */
        put: operations["createAccountAttachmentByFileName"];
        /** Updates attachment on a specific account by filename */
        post: operations["updateAccountAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BatchPayments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves either one or many batch payments for invoices */
        get: operations["getBatchPayments"];
        /** Creates one or many batch payments for invoices */
        put: operations["createBatchPayment"];
        /** Updates a specific batch payment for invoices and credit notes */
        post: operations["deleteBatchPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BatchPayments/{BatchPaymentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific batch payment using a unique batch payment Id */
        get: operations["getBatchPayment"];
        put?: never;
        /** Updates a specific batch payment for invoices and credit notes */
        post: operations["deleteBatchPaymentByUrlParam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BatchPayments/{BatchPaymentID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history from a specific batch payment */
        get: operations["getBatchPaymentHistory"];
        /** Creates a history record for a specific batch payment */
        put: operations["createBatchPaymentHistoryRecord"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransactions": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves any spent or received money transactions */
        get: operations["getBankTransactions"];
        /** Creates one or more spent or received money transaction */
        put: operations["createBankTransactions"];
        /** Updates or creates one or more spent or received money transaction */
        post: operations["updateOrCreateBankTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransactions/{BankTransactionID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a single spent or received money transaction by using a unique bank transaction Id */
        get: operations["getBankTransaction"];
        put?: never;
        /** Updates a single spent or received money transaction */
        post: operations["updateBankTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransactions/{BankTransactionID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves any attachments from a specific bank transactions */
        get: operations["getBankTransactionAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransactions/{BankTransactionID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves specific attachments from a specific BankTransaction using a unique attachment Id */
        get: operations["getBankTransactionAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransactions/{BankTransactionID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific bank transaction by filename */
        get: operations["getBankTransactionAttachmentByFileName"];
        /** Creates an attachment for a specific bank transaction by filename */
        put: operations["createBankTransactionAttachmentByFileName"];
        /** Updates a specific attachment from a specific bank transaction by filename */
        post: operations["updateBankTransactionAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransactions/{BankTransactionID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history from a specific bank transaction using a unique bank transaction Id */
        get: operations["getBankTransactionsHistory"];
        /** Creates a history record for a specific bank transactions */
        put: operations["createBankTransactionHistoryRecord"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransfers": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves all bank transfers */
        get: operations["getBankTransfers"];
        /** Creates a bank transfer */
        put: operations["createBankTransfer"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransfers/{BankTransferID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves specific bank transfers by using a unique bank transfer Id */
        get: operations["getBankTransfer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransfers/{BankTransferID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments from a specific bank transfer */
        get: operations["getBankTransferAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransfers/{BankTransferID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific bank transfer using a unique attachment ID */
        get: operations["getBankTransferAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransfers/{BankTransferID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment on a specific bank transfer by file name */
        get: operations["getBankTransferAttachmentByFileName"];
        put: operations["createBankTransferAttachmentByFileName"];
        post: operations["updateBankTransferAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BankTransfers/{BankTransferID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history from a specific bank transfer using a unique bank transfer Id */
        get: operations["getBankTransferHistory"];
        /** Creates a history record for a specific bank transfer */
        put: operations["createBankTransferHistoryRecord"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BrandingThemes": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves all the branding themes */
        get: operations["getBrandingThemes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BrandingThemes/{BrandingThemeID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific branding theme using a unique branding theme Id */
        get: operations["getBrandingTheme"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/BrandingThemes/{BrandingThemeID}/PaymentServices": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves the payment services for a specific branding theme */
        get: operations["getBrandingThemePaymentServices"];
        put?: never;
        /** Creates a new custom payment service for a specific branding theme */
        post: operations["createBrandingThemePaymentServices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Budgets": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieve a list of budgets */
        get: operations["getBudgets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Budgets/{BudgetID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific budget, which includes budget lines */
        get: operations["getBudget"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contacts": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves all contacts in a Xero organisation */
        get: operations["getContacts"];
        /** Creates multiple contacts (bulk) in a Xero organisation */
        put: operations["createContacts"];
        /** Updates or creates one or more contacts in a Xero organisation */
        post: operations["updateOrCreateContacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contacts/{ContactNumber}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific contact by contact number in a Xero organisation */
        get: operations["getContactByContactNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contacts/{ContactID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific contacts in a Xero organisation using a unique contact Id */
        get: operations["getContact"];
        put?: never;
        /** Updates a specific contact in a Xero organisation */
        post: operations["updateContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contacts/{ContactID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments for a specific contact in a Xero organisation */
        get: operations["getContactAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contacts/{ContactID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific contact using a unique attachment Id */
        get: operations["getContactAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contacts/{ContactID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific contact by file name */
        get: operations["getContactAttachmentByFileName"];
        put: operations["createContactAttachmentByFileName"];
        post: operations["updateContactAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contacts/{ContactID}/CISSettings": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves CIS settings for a specific contact in a Xero organisation */
        get: operations["getContactCISSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Contacts/{ContactID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history records for a specific contact */
        get: operations["getContactHistory"];
        /** Creates a new history record for a specific contact */
        put: operations["createContactHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactGroups": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves the contact Id and name of each contact group */
        get: operations["getContactGroups"];
        /** Creates a contact group */
        put: operations["createContactGroup"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactGroups/{ContactGroupID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific contact group by using a unique contact group Id */
        get: operations["getContactGroup"];
        put?: never;
        /** Updates a specific contact group */
        post: operations["updateContactGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactGroups/{ContactGroupID}/Contacts": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates contacts to a specific contact group */
        put: operations["createContactGroupContacts"];
        post?: never;
        /** Deletes all contacts from a specific contact group */
        delete: operations["deleteContactGroupContacts"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ContactGroups/{ContactGroupID}/Contacts/{ContactID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes a specific contact from a contact group using a unique contact Id */
        delete: operations["deleteContactGroupContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves any credit notes */
        get: operations["getCreditNotes"];
        /** Creates a new credit note */
        put: operations["createCreditNotes"];
        /** Updates or creates one or more credit notes */
        post: operations["updateOrCreateCreditNotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes/{CreditNoteID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific credit note using a unique credit note Id */
        get: operations["getCreditNote"];
        put?: never;
        /** Updates a specific credit note */
        post: operations["updateCreditNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes/{CreditNoteID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments for a specific credit notes */
        get: operations["getCreditNoteAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes/{CreditNoteID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific credit note using a unique attachment Id */
        get: operations["getCreditNoteAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes/{CreditNoteID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment on a specific credit note by file name */
        get: operations["getCreditNoteAttachmentByFileName"];
        /** Creates an attachment for a specific credit note */
        put: operations["createCreditNoteAttachmentByFileName"];
        /** Updates attachments on a specific credit note by file name */
        post: operations["updateCreditNoteAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes/{CreditNoteID}/pdf": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves credit notes as PDF files */
        get: operations["getCreditNoteAsPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes/{CreditNoteID}/Allocations": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates allocation for a specific credit note */
        put: operations["createCreditNoteAllocation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes/{CreditNoteID}/Allocations/{AllocationID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes an Allocation from a Credit Note */
        delete: operations["deleteCreditNoteAllocations"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/CreditNotes/{CreditNoteID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history records of a specific credit note */
        get: operations["getCreditNoteHistory"];
        /** Retrieves history records of a specific credit note */
        put: operations["createCreditNoteHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Currencies": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves currencies for your Xero organisation */
        get: operations["getCurrencies"];
        /** Create a new currency for a Xero organisation */
        put: operations["createCurrency"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Employees": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves employees used in Xero payrun */
        get: operations["getEmployees"];
        /** Creates new employees used in Xero payrun */
        put: operations["createEmployees"];
        /** Creates a single new employees used in Xero payrun */
        post: operations["updateOrCreateEmployees"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Employees/{EmployeeID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific employee used in Xero payrun using a unique employee Id */
        get: operations["getEmployee"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ExpenseClaims": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves expense claims */
        get: operations["getExpenseClaims"];
        /** Creates expense claims */
        put: operations["createExpenseClaims"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ExpenseClaims/{ExpenseClaimID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific expense claim using a unique expense claim Id */
        get: operations["getExpenseClaim"];
        put?: never;
        /** Updates a specific expense claims */
        post: operations["updateExpenseClaim"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ExpenseClaims/{ExpenseClaimID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history records of a specific expense claim */
        get: operations["getExpenseClaimHistory"];
        /** Creates a history record for a specific expense claim */
        put: operations["createExpenseClaimHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves sales invoices or purchase bills */
        get: operations["getInvoices"];
        /** Creates one or more sales invoices or purchase bills */
        put: operations["createInvoices"];
        /** Updates or creates one or more sales invoices or purchase bills */
        post: operations["updateOrCreateInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices/{InvoiceID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific sales invoice or purchase bill using a unique invoice Id */
        get: operations["getInvoice"];
        put?: never;
        /** Updates a specific sales invoices or purchase bills */
        post: operations["updateInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices/{InvoiceID}/pdf": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves invoices or purchase bills as PDF files */
        get: operations["getInvoiceAsPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices/{InvoiceID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments for a specific invoice or purchase bill */
        get: operations["getInvoiceAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices/{InvoiceID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific invoices or purchase bills by using a unique attachment Id */
        get: operations["getInvoiceAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices/{InvoiceID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves an attachment from a specific invoice or purchase bill by filename */
        get: operations["getInvoiceAttachmentByFileName"];
        /** Creates an attachment for a specific invoice or purchase bill by filename */
        put: operations["createInvoiceAttachmentByFileName"];
        /** Updates an attachment from a specific invoices or purchase bill by filename */
        post: operations["updateInvoiceAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices/{InvoiceID}/OnlineInvoice": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a URL to an online invoice */
        get: operations["getOnlineInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices/{InvoiceID}/Email": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sends a copy of a specific invoice to related contact via email */
        post: operations["emailInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Invoices/{InvoiceID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history records for a specific invoice */
        get: operations["getInvoiceHistory"];
        /** Creates a history record for a specific invoice */
        put: operations["createInvoiceHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/InvoiceReminders/Settings": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves invoice reminder settings */
        get: operations["getInvoiceReminders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Items": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves items */
        get: operations["getItems"];
        /** Creates one or more items */
        put: operations["createItems"];
        /** Updates or creates one or more items */
        post: operations["updateOrCreateItems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Items/{ItemID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific item using a unique item Id */
        get: operations["getItem"];
        put?: never;
        /** Updates a specific item */
        post: operations["updateItem"];
        /** Deletes a specific item */
        delete: operations["deleteItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Items/{ItemID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history for a specific item */
        get: operations["getItemHistory"];
        /** Creates a history record for a specific item */
        put: operations["createItemHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Journals": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves journals */
        get: operations["getJournals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Journals/{JournalID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific journal using a unique journal Id. */
        get: operations["getJournal"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Journals/{JournalNumber}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific journal using a unique journal number. */
        get: operations["getJournalByNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/LinkedTransactions": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves linked transactions (billable expenses) */
        get: operations["getLinkedTransactions"];
        /** Creates linked transactions (billable expenses) */
        put: operations["createLinkedTransaction"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/LinkedTransactions/{LinkedTransactionID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific linked transaction (billable expenses) using a unique linked transaction Id */
        get: operations["getLinkedTransaction"];
        put?: never;
        /** Updates a specific linked transactions (billable expenses) */
        post: operations["updateLinkedTransaction"];
        /** Deletes a specific linked transactions (billable expenses) */
        delete: operations["deleteLinkedTransaction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ManualJournals": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves manual journals */
        get: operations["getManualJournals"];
        /** Creates one or more manual journals */
        put: operations["createManualJournals"];
        /** Updates or creates a single manual journal */
        post: operations["updateOrCreateManualJournals"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ManualJournals/{ManualJournalID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific manual journal */
        get: operations["getManualJournal"];
        put?: never;
        /** Updates a specific manual journal */
        post: operations["updateManualJournal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ManualJournals/{ManualJournalID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachment for a specific manual journal */
        get: operations["getManualJournalAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ManualJournals/{ManualJournalID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Allows you to retrieve a specific attachment from a specific manual journal using a unique attachment Id */
        get: operations["getManualJournalAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ManualJournals/{ManualJournalID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific manual journal by file name */
        get: operations["getManualJournalAttachmentByFileName"];
        /** Creates a specific attachment for a specific manual journal by file name */
        put: operations["createManualJournalAttachmentByFileName"];
        /** Updates a specific attachment from a specific manual journal by file name */
        post: operations["updateManualJournalAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ManualJournals/{ManualJournalID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history for a specific manual journal */
        get: operations["getManualJournalsHistory"];
        /** Creates a history record for a specific manual journal */
        put: operations["createManualJournalHistoryRecord"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Organisation": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves Xero organisation details */
        get: operations["getOrganisations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Organisation/Actions": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of the key actions your app has permission to perform in the connected Xero organisation. */
        get: operations["getOrganisationActions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Organisation/{OrganisationID}/CISSettings": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves the CIS settings for the Xero organistaion. */
        get: operations["getOrganisationCISSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Overpayments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves overpayments */
        get: operations["getOverpayments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Overpayments/{OverpaymentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific overpayment using a unique overpayment Id */
        get: operations["getOverpayment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Overpayments/{OverpaymentID}/Allocations": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates a single allocation for a specific overpayment */
        put: operations["createOverpaymentAllocations"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Overpayments/{OverpaymentID}/Allocations/{AllocationID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes an Allocation from an overpayment */
        delete: operations["deleteOverpaymentAllocations"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Overpayments/{OverpaymentID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history records of a specific overpayment */
        get: operations["getOverpaymentHistory"];
        /** Creates a history record for a specific overpayment */
        put: operations["createOverpaymentHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Payments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves payments for invoices and credit notes */
        get: operations["getPayments"];
        /** Creates multiple payments for invoices or credit notes */
        put: operations["createPayments"];
        /** Creates a single payment for invoice or credit notes */
        post: operations["createPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Payments/{PaymentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific payment for invoices and credit notes using a unique payment Id */
        get: operations["getPayment"];
        put?: never;
        /** Updates a specific payment for invoices and credit notes */
        post: operations["deletePayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Payments/{PaymentID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history records of a specific payment */
        get: operations["getPaymentHistory"];
        /** Creates a history record for a specific payment */
        put: operations["createPaymentHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PaymentServices": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves payment services */
        get: operations["getPaymentServices"];
        /** Creates a payment service */
        put: operations["createPaymentService"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Prepayments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves prepayments */
        get: operations["getPrepayments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Prepayments/{PrepaymentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Allows you to retrieve a specified prepayments */
        get: operations["getPrepayment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Prepayments/{PrepaymentID}/Allocations": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Allows you to create an Allocation for prepayments */
        put: operations["createPrepaymentAllocations"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Prepayments/{PrepaymentID}/Allocations/{AllocationID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes an Allocation from a Prepayment */
        delete: operations["deletePrepaymentAllocations"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Prepayments/{PrepaymentID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history record for a specific prepayment */
        get: operations["getPrepaymentHistory"];
        /** Creates a history record for a specific prepayment */
        put: operations["createPrepaymentHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PurchaseOrders": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves purchase orders */
        get: operations["getPurchaseOrders"];
        /** Creates one or more purchase orders */
        put: operations["createPurchaseOrders"];
        /** Updates or creates one or more purchase orders */
        post: operations["updateOrCreatePurchaseOrders"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PurchaseOrders/{PurchaseOrderID}/pdf": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves specific purchase order as PDF files using a unique purchase order Id */
        get: operations["getPurchaseOrderAsPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PurchaseOrders/{PurchaseOrderID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific purchase order using a unique purchase order Id */
        get: operations["getPurchaseOrder"];
        put?: never;
        /** Updates a specific purchase order */
        post: operations["updatePurchaseOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PurchaseOrders/{PurchaseOrderNumber}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific purchase order using purchase order number */
        get: operations["getPurchaseOrderByNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PurchaseOrders/{PurchaseOrderID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history for a specific purchase order */
        get: operations["getPurchaseOrderHistory"];
        /** Creates a history record for a specific purchase orders */
        put: operations["createPurchaseOrderHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PurchaseOrders/{PurchaseOrderID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments for a specific purchase order */
        get: operations["getPurchaseOrderAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PurchaseOrders/{PurchaseOrderID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves specific attachment for a specific purchase order using a unique attachment Id */
        get: operations["getPurchaseOrderAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/PurchaseOrders/{PurchaseOrderID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment for a specific purchase order by filename */
        get: operations["getPurchaseOrderAttachmentByFileName"];
        /** Creates attachment for a specific purchase order */
        put: operations["createPurchaseOrderAttachmentByFileName"];
        /** Updates a specific attachment for a specific purchase order by filename */
        post: operations["updatePurchaseOrderAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Quotes": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves sales quotes */
        get: operations["getQuotes"];
        /** Create one or more quotes */
        put: operations["createQuotes"];
        /** Updates or creates one or more quotes */
        post: operations["updateOrCreateQuotes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Quotes/{QuoteID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific quote using a unique quote Id */
        get: operations["getQuote"];
        put?: never;
        /** Updates a specific quote */
        post: operations["updateQuote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Quotes/{QuoteID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history records of a specific quote */
        get: operations["getQuoteHistory"];
        /** Creates a history record for a specific quote */
        put: operations["createQuoteHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Quotes/{QuoteID}/pdf": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific quote as a PDF file using a unique quote Id */
        get: operations["getQuoteAsPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Quotes/{QuoteID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments for a specific quote */
        get: operations["getQuoteAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Quotes/{QuoteID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific quote using a unique attachment Id */
        get: operations["getQuoteAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Quotes/{QuoteID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific quote by filename */
        get: operations["getQuoteAttachmentByFileName"];
        /** Creates attachment for a specific quote */
        put: operations["createQuoteAttachmentByFileName"];
        /** Updates a specific attachment from a specific quote by filename */
        post: operations["updateQuoteAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Receipts": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves draft expense claim receipts for any user */
        get: operations["getReceipts"];
        /** Creates draft expense claim receipts for any user */
        put: operations["createReceipt"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Receipts/{ReceiptID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific draft expense claim receipt by using a unique receipt Id */
        get: operations["getReceipt"];
        put?: never;
        /** Updates a specific draft expense claim receipts */
        post: operations["updateReceipt"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Receipts/{ReceiptID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments for a specific expense claim receipt */
        get: operations["getReceiptAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Receipts/{ReceiptID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachments from a specific expense claim receipts by using a unique attachment Id */
        get: operations["getReceiptAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Receipts/{ReceiptID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific expense claim receipts by file name */
        get: operations["getReceiptAttachmentByFileName"];
        /** Creates an attachment on a specific expense claim receipts by file name */
        put: operations["createReceiptAttachmentByFileName"];
        /** Updates a specific attachment on a specific expense claim receipts by file name */
        post: operations["updateReceiptAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Receipts/{ReceiptID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a history record for a specific receipt */
        get: operations["getReceiptHistory"];
        /** Creates a history record for a specific receipt */
        put: operations["createReceiptHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RepeatingInvoices": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves repeating invoices */
        get: operations["getRepeatingInvoices"];
        /** Creates one or more repeating invoice templates */
        put: operations["createRepeatingInvoices"];
        /** Creates or deletes one or more repeating invoice templates */
        post: operations["updateOrCreateRepeatingInvoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RepeatingInvoices/{RepeatingInvoiceID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific repeating invoice by using a unique repeating invoice Id */
        get: operations["getRepeatingInvoice"];
        put?: never;
        /** Deletes a specific repeating invoice template */
        post: operations["updateRepeatingInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RepeatingInvoices/{RepeatingInvoiceID}/Attachments": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves attachments from a specific repeating invoice */
        get: operations["getRepeatingInvoiceAttachments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{AttachmentID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific repeating invoice */
        get: operations["getRepeatingInvoiceAttachmentById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RepeatingInvoices/{RepeatingInvoiceID}/Attachments/{FileName}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific attachment from a specific repeating invoices by file name */
        get: operations["getRepeatingInvoiceAttachmentByFileName"];
        /** Creates an attachment from a specific repeating invoices by file name */
        put: operations["createRepeatingInvoiceAttachmentByFileName"];
        /** Updates a specific attachment from a specific repeating invoices by file name */
        post: operations["updateRepeatingInvoiceAttachmentByFileName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/RepeatingInvoices/{RepeatingInvoiceID}/History": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves history record for a specific repeating invoice */
        get: operations["getRepeatingInvoiceHistory"];
        /** Creates a  history record for a specific repeating invoice */
        put: operations["createRepeatingInvoiceHistory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/TenNinetyNine": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieve reports for 1099 */
        get: operations["getReportTenNinetyNine"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/AgedPayablesByContact": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves report for aged payables by contact */
        get: operations["getReportAgedPayablesByContact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/AgedReceivablesByContact": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves report for aged receivables by contact */
        get: operations["getReportAgedReceivablesByContact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/BalanceSheet": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves report for balancesheet */
        get: operations["getReportBalanceSheet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/BankSummary": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves report for bank summary */
        get: operations["getReportBankSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/{ReportID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific report using a unique ReportID */
        get: operations["getReportFromId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/BudgetSummary": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves report for budget summary */
        get: operations["getReportBudgetSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/ExecutiveSummary": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves report for executive summary */
        get: operations["getReportExecutiveSummary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a list of the organistaions unique reports that require a uuid to fetch */
        get: operations["getReportsList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/ProfitAndLoss": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves report for profit and loss */
        get: operations["getReportProfitAndLoss"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Reports/TrialBalance": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves report for trial balance */
        get: operations["getReportTrialBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Setup": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sets the chart of accounts, the conversion date and conversion balances */
        post: operations["postSetup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TaxRates": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves tax rates */
        get: operations["getTaxRates"];
        /** Creates one or more tax rates */
        put: operations["createTaxRates"];
        /** Updates tax rates */
        post: operations["updateTaxRate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TaxRates/{TaxType}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific tax rate according to given TaxType code */
        get: operations["getTaxRateByTaxType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TrackingCategories": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves tracking categories and options */
        get: operations["getTrackingCategories"];
        /** Create tracking categories */
        put: operations["createTrackingCategory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TrackingCategories/{TrackingCategoryID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves specific tracking categories and options using a unique tracking category Id */
        get: operations["getTrackingCategory"];
        put?: never;
        /** Updates a specific tracking category */
        post: operations["updateTrackingCategory"];
        /** Deletes a specific tracking category */
        delete: operations["deleteTrackingCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TrackingCategories/{TrackingCategoryID}/Options": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Creates options for a specific tracking category */
        put: operations["createTrackingOptions"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/TrackingCategories/{TrackingCategoryID}/Options/{TrackingOptionID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Updates a specific option for a specific tracking category */
        post: operations["updateTrackingOptions"];
        /** Deletes a specific option for a specific tracking category */
        delete: operations["deleteTrackingOptions"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Users": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves users */
        get: operations["getUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Users/{UserID}": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        /** Retrieves a specific user */
        get: operations["getUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AddressForOrganisation: {
            /**
             * @description define the type of address
             * @enum {string}
             */
            AddressType?: "POBOX" | "STREET" | "DELIVERY";
            /** @description max length = 500 */
            AddressLine1?: string;
            /** @description max length = 500 */
            AddressLine2?: string;
            /** @description max length = 500 */
            AddressLine3?: string;
            /** @description max length = 500 */
            AddressLine4?: string;
            /** @description max length = 255 */
            City?: string;
            /** @description max length = 255 */
            Region?: string;
            /** @description max length = 50 */
            PostalCode?: string;
            /** @description max length = 50, [A-Z], [a-z] only */
            Country?: string;
            /** @description max length = 255 */
            AttentionTo?: string;
        };
        Address: {
            /**
             * @description define the type of address
             * @enum {string}
             */
            AddressType?: "POBOX" | "STREET";
            /** @description max length = 500 */
            AddressLine1?: string;
            /** @description max length = 500 */
            AddressLine2?: string;
            /** @description max length = 500 */
            AddressLine3?: string;
            /** @description max length = 500 */
            AddressLine4?: string;
            /** @description max length = 255 */
            City?: string;
            /** @description max length = 255 */
            Region?: string;
            /** @description max length = 50 */
            PostalCode?: string;
            /** @description max length = 50, [A-Z], [a-z] only */
            Country?: string;
            /** @description max length = 255 */
            AttentionTo?: string;
        };
        Phone: {
            /** @enum {string} */
            PhoneType?: "DEFAULT" | "DDI" | "MOBILE" | "FAX" | "OFFICE";
            /** @description max length = 50 */
            PhoneNumber?: string;
            /** @description max length = 10 */
            PhoneAreaCode?: string;
            /** @description max length = 20 */
            PhoneCountryCode?: string;
        };
        Accounts: {
            Accounts?: components["schemas"]["Account"][];
        };
        Account: {
            /**
             * @description Customer defined alpha numeric account code e.g 200 or SALES (max length = 10)
             * @example 4400
             */
            Code?: string;
            /**
             * @description Name of account (max length = 150)
             * @example Food Sales
             */
            Name?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for an account – specified as a string following  the endpoint name   e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
             * @example 00000000-0000-0000-0000-000000000000
             */
            AccountID?: string;
            Type?: components["schemas"]["AccountType"];
            /** @description For bank accounts only (Account Type BANK) */
            BankAccountNumber?: string;
            /**
             * @description Accounts with a status of ACTIVE can be updated to ARCHIVED. See Account Status Codes
             * @enum {string}
             */
            Status?: "ACTIVE" | "ARCHIVED" | "DELETED";
            /** @description Description of the Account. Valid for all types of accounts except bank accounts (max length = 4000) */
            Description?: string;
            /**
             * @description For bank accounts only. See Bank Account types
             * @enum {string}
             */
            BankAccountType?: "BANK" | "CREDITCARD" | "PAYPAL" | "NONE" | "";
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /** @description The tax type from taxRates */
            TaxType?: string;
            /** @description Boolean – describes whether account can have payments applied to it */
            EnablePaymentsToAccount?: boolean;
            /** @description Boolean – describes whether account code is available for use with expense claims */
            ShowInExpenseClaims?: boolean;
            /**
             * @description See Account Class Types
             * @enum {string}
             */
            readonly Class?: "ASSET" | "EQUITY" | "EXPENSE" | "LIABILITY" | "REVENUE";
            /**
             * @description If this is a system account then this element is returned. See System Account types. Note that non-system accounts may have this element set as either “” or null.
             * @enum {string}
             */
            readonly SystemAccount?: "DEBTORS" | "CREDITORS" | "BANKCURRENCYGAIN" | "GST" | "GSTONIMPORTS" | "HISTORICAL" | "REALISEDCURRENCYGAIN" | "RETAINEDEARNINGS" | "ROUNDING" | "TRACKINGTRANSFERS" | "UNPAIDEXPCLM" | "UNREALISEDCURRENCYGAIN" | "WAGEPAYABLES" | "CISASSETS" | "CISASSET" | "CISLABOUR" | "CISLABOUREXPENSE" | "CISLABOURINCOME" | "CISLIABILITY" | "CISMATERIALS" | "";
            /** @description Shown if set */
            ReportingCode?: string;
            /** @description Shown if set */
            readonly ReportingCodeName?: string;
            /**
             * @description boolean to indicate if an account has an attachment (read only)
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /**
             * @description Last modified date UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /** @description Boolean – describes whether the account is shown in the watchlist widget on the dashboard */
            AddToWatchlist?: boolean;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        /**
         * @description See Account Types
         * @enum {string}
         */
        AccountType: "BANK" | "CURRENT" | "CURRLIAB" | "DEPRECIATN" | "DIRECTCOSTS" | "EQUITY" | "EXPENSE" | "FIXED" | "INVENTORY" | "LIABILITY" | "NONCURRENT" | "OTHERINCOME" | "OVERHEADS" | "PREPAYMENT" | "REVENUE" | "SALES" | "TERMLIAB" | "PAYG";
        Attachments: {
            Attachments?: components["schemas"]["Attachment"][];
        };
        Attachment: {
            /**
             * Format: uuid
             * @description Unique ID for the file
             * @example 00000000-0000-0000-0000-000000000000
             */
            AttachmentID?: string;
            /**
             * @description Name of the file
             * @example xero-dev.jpg
             */
            FileName?: string;
            /**
             * @description URL to the file on xero.com
             * @example https://api.xero.com/api.xro/2.0/Accounts/da962997-a8bd-4dff-9616-01cdc199283f/Attachments/sample5.jpg
             */
            Url?: string;
            /**
             * @description Type of file
             * @example image/jpg
             */
            MimeType?: string;
            /** @description Length of the file content */
            ContentLength?: number;
            /** @description Include the file with the online invoice */
            IncludeOnline?: boolean;
        };
        BankTransactions: {
            BankTransactions?: components["schemas"]["BankTransaction"][];
        };
        BankTransaction: {
            /**
             * @description See Bank Transaction Types
             * @enum {string}
             */
            Type: "RECEIVE" | "RECEIVE-OVERPAYMENT" | "RECEIVE-PREPAYMENT" | "SPEND" | "SPEND-OVERPAYMENT" | "SPEND-PREPAYMENT" | "RECEIVE-TRANSFER" | "SPEND-TRANSFER";
            Contact?: components["schemas"]["Contact"];
            /** @description See LineItems */
            LineItems: components["schemas"]["LineItem"][];
            BankAccount: components["schemas"]["Account"];
            /** @description Boolean to show if transaction is reconciled */
            IsReconciled?: boolean;
            /** @description Date of transaction – YYYY-MM-DD */
            Date?: string;
            /** @description Reference for the transaction. Only supported for SPEND and RECEIVE transactions. */
            Reference?: string;
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /**
             * Format: double
             * @description Exchange rate to base currency when money is spent or received. e.g.0.7500 Only used for bank transactions in non base currency. If this isn’t specified for non base currency accounts then either the user-defined rate (preference) or the XE.com day rate will be used. Setting currency is only supported on overpayments.
             */
            CurrencyRate?: number;
            /** @description URL link to a source document – shown as “Go to App Name” */
            Url?: string;
            /**
             * @description See Bank Transaction Status Codes
             * @enum {string}
             */
            Status?: "AUTHORISED" | "DELETED" | "VOIDED";
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /**
             * Format: double
             * @description Total of bank transaction excluding taxes
             */
            SubTotal?: number;
            /**
             * Format: double
             * @description Total tax on bank transaction
             */
            TotalTax?: number;
            /**
             * Format: double
             * @description Total of bank transaction tax inclusive
             */
            Total?: number;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for bank transaction
             * @example 00000000-0000-0000-0000-000000000000
             */
            BankTransactionID?: string;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for a Prepayment. This will be returned on BankTransactions with a Type of SPEND-PREPAYMENT or RECEIVE-PREPAYMENT
             * @example 00000000-0000-0000-0000-000000000000
             */
            readonly PrepaymentID?: string;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for an Overpayment. This will be returned on BankTransactions with a Type of SPEND-OVERPAYMENT or RECEIVE-OVERPAYMENT
             * @example 00000000-0000-0000-0000-000000000000
             */
            readonly OverpaymentID?: string;
            /**
             * @description Last modified date UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /**
             * @description Boolean to indicate if a bank transaction has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /** @description A string to indicate if a invoice status */
            StatusAttributeString?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        /**
         * @description Line amounts are exclusive of tax by default if you don’t specify this element. See Line Amount Types
         * @enum {string}
         */
        LineAmountTypes: "Exclusive" | "Inclusive" | "NoTax";
        LineItem: {
            /**
             * Format: uuid
             * @description LineItem unique ID
             * @example 00000000-0000-0000-0000-000000000000
             */
            LineItemID?: string;
            /** @description Description needs to be at least 1 char long. A line item with just a description (i.e no unit amount or quantity) can be created by specifying just a <Description> element that contains at least 1 character */
            Description?: string;
            /**
             * Format: double
             * @description LineItem Quantity
             */
            Quantity?: number;
            /**
             * Format: double
             * @description LineItem Unit Amount
             */
            UnitAmount?: number;
            /** @description See Items */
            ItemCode?: string;
            /** @description See Accounts */
            AccountCode?: string;
            /**
             * Format: uuid
             * @description The associated account ID related to this line item
             * @example 00000000-0000-0000-0000-000000000000
             */
            AccountID?: string;
            /** @description The tax type from TaxRates */
            TaxType?: string;
            /**
             * Format: double
             * @description The tax amount is auto calculated as a percentage of the line amount (see below) based on the tax rate. This value can be overriden if the calculated <TaxAmount> is not correct.
             */
            TaxAmount?: number;
            Item?: components["schemas"]["LineItemItem"];
            /**
             * Format: double
             * @description If you wish to omit either the Quantity or UnitAmount you can provide a LineAmount and Xero will calculate the missing amount for you. The line amount reflects the discounted price if either a DiscountRate or DiscountAmount has been used i.e. LineAmount = Quantity * Unit Amount * ((100 - DiscountRate)/100) or LineAmount = (Quantity * UnitAmount) - DiscountAmount
             */
            LineAmount?: number;
            /** @description Optional Tracking Category – see Tracking.  Any LineItem can have a  maximum of 2 <TrackingCategory> elements. */
            Tracking?: components["schemas"]["LineItemTracking"][];
            /**
             * Format: double
             * @description Percentage discount being applied to a line item (only supported on  ACCREC invoices – ACC PAY invoices and credit notes in Xero do not support discounts
             */
            DiscountRate?: number;
            /**
             * Format: double
             * @description Discount amount being applied to a line item. Only supported on ACCREC invoices and quotes. ACCPAY invoices and credit notes in Xero do not support discounts.
             */
            DiscountAmount?: number;
            /**
             * Format: uuid
             * @description The Xero identifier for a Repeating Invoice
             * @example 00000000-0000-0000-0000-000000000000
             */
            RepeatingInvoiceID?: string;
        };
        LineItemItem: {
            /** @description User defined item code (max length = 30) */
            Code?: string;
            /** @description The name of the item (max length = 50) */
            Name?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for an Item
             */
            ItemID?: string;
        };
        LineItemTracking: {
            /**
             * Format: uuid
             * @description The Xero identifier for a tracking category
             * @example 00000000-0000-0000-0000-000000000000
             */
            TrackingCategoryID?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for a tracking category option
             * @example 00000000-0000-0000-0000-000000000000
             */
            TrackingOptionID?: string;
            /**
             * @description The name of the tracking category
             * @example Region
             */
            Name?: string;
            /**
             * @description See Tracking Options
             * @example North
             */
            Option?: string;
        };
        BankTransfers: {
            BankTransfers?: components["schemas"]["BankTransfer"][];
        };
        BankTransfer: {
            FromBankAccount: components["schemas"]["Account"];
            ToBankAccount: components["schemas"]["Account"];
            /**
             * Format: double
             * @description amount of the transaction
             */
            Amount: number;
            /** @description The date of the Transfer YYYY-MM-DD */
            Date?: string;
            /**
             * Format: uuid
             * @description The identifier of the Bank Transfer
             */
            readonly BankTransferID?: string;
            /**
             * Format: double
             * @description The currency rate
             */
            readonly CurrencyRate?: number;
            /**
             * Format: uuid
             * @description The Bank Transaction ID for the source account
             */
            readonly FromBankTransactionID?: string;
            /**
             * Format: uuid
             * @description The Bank Transaction ID for the destination account
             */
            readonly ToBankTransactionID?: string;
            /**
             * @description The Bank Transaction boolean to show if it is reconciled for the source account
             * @default false
             * @example false
             */
            FromIsReconciled: boolean;
            /**
             * @description The Bank Transaction boolean to show if it is reconciled for the destination account
             * @default false
             * @example false
             */
            ToIsReconciled: boolean;
            /** @description Reference for the transactions. */
            Reference?: string;
            /**
             * @description Boolean to indicate if a Bank Transfer has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /**
             * @description UTC timestamp of creation date of bank transfer
             * @example /Date(1573755038314)/
             */
            readonly CreatedDateUTC?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        BatchPayments: {
            BatchPayments?: components["schemas"]["BatchPayment"][];
        };
        BatchPayment: {
            Account?: components["schemas"]["Account"];
            /** @description (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero. */
            Reference?: string;
            /** @description (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero. */
            Particulars?: string;
            /** @description (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero. */
            Code?: string;
            /** @description (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18 */
            Details?: string;
            /** @description (UK Only) Only shows on the statement line in Xero. Max length =18 */
            Narrative?: string;
            /**
             * Format: uuid
             * @description The Xero generated unique identifier for the bank transaction (read-only)
             */
            readonly BatchPaymentID?: string;
            /** @description Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06 */
            DateString?: string;
            /** @description Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06 */
            Date?: string;
            /**
             * Format: double
             * @description The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
             */
            Amount?: number;
            /** @description An array of payments */
            Payments?: components["schemas"]["Payment"][];
            /**
             * @description PAYBATCH for bill payments or RECBATCH for sales invoice payments (read-only)
             * @enum {string}
             */
            readonly Type?: "PAYBATCH" | "RECBATCH";
            /**
             * @description AUTHORISED or DELETED (read-only). New batch payments will have a status of AUTHORISED. It is not possible to delete batch payments via the API.
             * @enum {string}
             */
            readonly Status?: "AUTHORISED" | "DELETED";
            /**
             * Format: double
             * @description The total of the payments that make up the batch (read-only)
             */
            readonly TotalAmount?: number;
            /**
             * @description UTC timestamp of last update to the payment
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /** @description Booelan that tells you if the batch payment has been reconciled (read-only) */
            readonly IsReconciled?: boolean;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        /** @description Bank details for use on a batch payment stored with each contact */
        BatchPaymentDetails: {
            /**
             * @description Bank account number for use with Batch Payments
             * @example 123-456-1111111
             */
            BankAccountNumber?: string;
            /**
             * @description Name of bank for use with Batch Payments
             * @example ACME Bank
             */
            BankAccountName?: string;
            /**
             * @description (Non-NZ Only) These details are sent to the org’s bank as a reference for the batch payment transaction. They will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement imported into Xero. Maximum field length = 18
             * @example Hello World
             */
            Details?: string;
            /**
             * @description (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
             * @example ABC
             */
            Code?: string;
            /**
             * @description (NZ Only) Optional references for the batch payment transaction. It will also show with the batch payment transaction in the bank reconciliation Find & Match screen. Depending on your individual bank, the detail may also show on the bank statement you import into Xero.
             * @example Foobar
             */
            Reference?: string;
        };
        BatchPaymentDelete: {
            /**
             * Format: uuid
             * @description The Xero generated unique identifier for the bank transaction (read-only)
             */
            BatchPaymentID: string;
            /**
             * @description The status of the batch payment.
             * @default DELETED
             */
            Status: string;
        };
        BatchPaymentDeleteByUrlParam: {
            /**
             * @description The status of the batch payment.
             * @default DELETED
             */
            Status: string;
        };
        BrandingThemes: {
            BrandingThemes?: components["schemas"]["BrandingTheme"][];
        };
        BrandingTheme: {
            /**
             * Format: uuid
             * @description Xero identifier
             */
            BrandingThemeID?: string;
            /** @description Name of branding theme */
            Name?: string;
            /** @description The location of the image file used as the logo on this branding theme */
            LogoUrl?: string;
            /**
             * @description Always INVOICE
             * @enum {string}
             */
            Type?: "INVOICE";
            /** @description Integer – ranked order of branding theme. The default branding theme has a value of 0 */
            SortOrder?: number;
            /**
             * @description UTC timestamp of creation date of branding theme
             * @example /Date(1573755038314)/
             */
            readonly CreatedDateUTC?: string;
        };
        PaymentServices: {
            PaymentServices?: components["schemas"]["PaymentService"][];
        };
        PaymentService: {
            /**
             * Format: uuid
             * @description Xero identifier
             */
            PaymentServiceID?: string;
            /** @description Name of payment service */
            PaymentServiceName?: string;
            /** @description The custom payment URL */
            PaymentServiceUrl?: string;
            /** @description The text displayed on the Pay Now button in Xero Online Invoicing. If this is not set it will default to Pay by credit card */
            PayNowText?: string;
            /** @description This will always be CUSTOM for payment services created via the API. */
            PaymentServiceType?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        Contacts: {
            Contacts?: components["schemas"]["Contact"][];
        };
        Contact: {
            /**
             * Format: uuid
             * @description Xero identifier
             */
            ContactID?: string;
            /**
             * Format: uuid
             * @description ID for the destination of a merged contact. Only returned when using paging or when fetching a contact by ContactId or ContactNumber.
             */
            MergedToContactID?: string;
            /** @description This can be updated via the API only i.e. This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50). If the Contact Number is used, this is displayed as Contact Code in the Contacts UI in Xero. */
            ContactNumber?: string;
            /** @description A user defined account number. This can be updated via the API and the Xero UI (max length = 50) */
            AccountNumber?: string;
            /**
             * @description Current status of a contact – see contact status types
             * @enum {string}
             */
            ContactStatus?: "ACTIVE" | "ARCHIVED" | "GDPRREQUEST";
            /** @description Full name of contact/organisation (max length = 255) */
            Name?: string;
            /** @description First name of contact person (max length = 255) */
            FirstName?: string;
            /** @description Last name of contact person (max length = 255) */
            LastName?: string;
            /** @description Company registration number (max length = 50) */
            CompanyNumber?: string;
            /** @description Email address of contact person (umlauts not supported) (max length  = 255) */
            EmailAddress?: string;
            /** @description See contact persons */
            ContactPersons?: components["schemas"]["ContactPerson"][];
            /** @description Bank account number of contact */
            BankAccountDetails?: string;
            /** @description Tax number of contact – this is also known as the ABN (Australia), GST Number (New Zealand), VAT Number (UK) or Tax ID Number (US and global) in the Xero UI depending on which regionalized version of Xero you are using (max length = 50) */
            TaxNumber?: string;
            /** @description The tax type from TaxRates */
            AccountsReceivableTaxType?: string;
            /** @description The tax type from TaxRates */
            AccountsPayableTaxType?: string;
            /** @description Store certain address types for a contact – see address types */
            Addresses?: components["schemas"]["Address"][];
            /** @description Store certain phone types for a contact – see phone types */
            Phones?: components["schemas"]["Phone"][];
            /** @description true or false – Boolean that describes if a contact that has any AP  invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts payable invoice is generated against this contact. */
            IsSupplier?: boolean;
            /** @description true or false – Boolean that describes if a contact has any AR invoices entered against them. Cannot be set via PUT or POST – it is automatically set when an accounts receivable invoice is generated against this contact. */
            IsCustomer?: boolean;
            /**
             * @description The default sales line amount type for a contact. Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
             * @enum {string}
             */
            SalesDefaultLineAmountType?: "INCLUSIVE" | "EXCLUSIVE" | "NONE";
            /**
             * @description The default purchases line amount type for a contact Only available when summaryOnly parameter or paging is used, or when fetch by ContactId or ContactNumber.
             * @enum {string}
             */
            PurchasesDefaultLineAmountType?: "INCLUSIVE" | "EXCLUSIVE" | "NONE";
            DefaultCurrency?: components["schemas"]["CurrencyCode"];
            /** @description Store XeroNetworkKey for contacts. */
            XeroNetworkKey?: string;
            /** @description The default sales account code for contacts */
            SalesDefaultAccountCode?: string;
            /** @description The default purchases account code for contacts */
            PurchasesDefaultAccountCode?: string;
            /** @description The default sales tracking categories for contacts */
            SalesTrackingCategories?: components["schemas"]["SalesTrackingCategory"][];
            /** @description The default purchases tracking categories for contacts */
            PurchasesTrackingCategories?: components["schemas"]["SalesTrackingCategory"][];
            /** @description The name of the Tracking Category assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories */
            TrackingCategoryName?: string;
            /** @description The name of the Tracking Option assigned to the contact under SalesTrackingCategories and PurchasesTrackingCategories */
            TrackingCategoryOption?: string;
            PaymentTerms?: components["schemas"]["PaymentTerm"];
            /**
             * @description UTC timestamp of last update to contact
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /** @description Displays which contact groups a contact is included in */
            ContactGroups?: components["schemas"]["ContactGroup"][];
            /** @description Website address for contact (read only) */
            readonly Website?: string;
            BrandingTheme?: components["schemas"]["BrandingTheme"];
            BatchPayments?: components["schemas"]["BatchPaymentDetails"];
            /**
             * Format: double
             * @description The default discount rate for the contact (read only)
             */
            readonly Discount?: number;
            Balances?: components["schemas"]["Balances"];
            /** @description Displays array of attachments from the API */
            Attachments?: components["schemas"]["Attachment"][];
            /**
             * @description A boolean to indicate if a contact has an attachment
             * @default false
             * @example false
             */
            HasAttachments: boolean;
            /** @description Displays validation errors returned from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
            /**
             * @description A boolean to indicate if a contact has an validation errors
             * @default false
             * @example false
             */
            HasValidationErrors: boolean;
            /** @description Status of object */
            StatusAttributeString?: string;
        };
        Budgets: {
            Budgets?: components["schemas"]["Budget"][];
        };
        Budget: {
            /**
             * Format: uuid
             * @description Xero identifier
             */
            BudgetID?: string;
            /**
             * @description Type of Budget. OVERALL or TRACKING
             * @enum {string}
             */
            Type?: "OVERALL" | "TRACKING";
            /** @description The Budget description */
            Description?: string;
            /**
             * @description UTC timestamp of last update to budget
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            BudgetLines?: components["schemas"]["BudgetLine"][];
            Tracking?: components["schemas"]["TrackingCategory"][];
        };
        BudgetLine: {
            /**
             * Format: uuid
             * @description See Accounts
             */
            AccountID?: string;
            /**
             * @description See Accounts
             * @example 90
             */
            AccountCode?: string;
            BudgetBalances?: components["schemas"]["BudgetBalance"][];
        };
        BudgetBalance: {
            /** @description Period the amount applies to (e.g. “2019-08”) */
            Period?: string;
            /**
             * Format: double
             * @description LineItem Quantity
             */
            Amount?: number;
            /**
             * Format: double
             * @description Budgeted amount
             */
            UnitAmount?: number;
            /** @description Any footnotes associated with this balance */
            Notes?: string;
        };
        /** @description The raw AccountsReceivable(sales invoices) and AccountsPayable(bills) outstanding and overdue amounts, not converted to base currency (read only) */
        Balances: {
            AccountsReceivable?: components["schemas"]["AccountsReceivable"];
            AccountsPayable?: components["schemas"]["AccountsPayable"];
        };
        AccountsReceivable: {
            /** Format: double */
            Outstanding?: number;
            /** Format: double */
            Overdue?: number;
        };
        AccountsPayable: {
            /** Format: double */
            Outstanding?: number;
            /** Format: double */
            Overdue?: number;
        };
        CISSettings: {
            CISSettings?: components["schemas"]["CISSetting"][];
        };
        CISSetting: {
            /** @description Boolean that describes if the contact is a CIS Subcontractor */
            CISEnabled?: boolean;
            /**
             * Format: double
             * @description CIS Deduction rate for the contact if he is a subcontractor. If the contact is not CISEnabled, then the rate is not returned
             */
            readonly Rate?: number;
        };
        CISOrgSettings: {
            CISSettings?: components["schemas"]["CISOrgSetting"][];
        };
        CISOrgSetting: {
            /** @description true or false - Boolean that describes if the organisation is a CIS Contractor */
            CISContractorEnabled?: boolean;
            /** @description true or false - Boolean that describes if the organisation is a CIS SubContractor */
            CISSubContractorEnabled?: boolean;
            /**
             * Format: double
             * @description CIS Deduction rate for the organisation
             */
            readonly Rate?: number;
        };
        ContactPerson: {
            /** @description First name of person */
            FirstName?: string;
            /** @description Last name of person */
            LastName?: string;
            /** @description Email address of person */
            EmailAddress?: string;
            /** @description boolean to indicate whether contact should be included on emails with invoices etc. */
            IncludeInEmails?: boolean;
        };
        ContactGroups: {
            ContactGroups?: components["schemas"]["ContactGroup"][];
        };
        ContactGroup: {
            /** @description The Name of the contact group. Required when creating a new contact  group */
            Name?: string;
            /**
             * @description The Status of a contact group. To delete a contact group update the status to DELETED. Only contact groups with a status of ACTIVE are returned on GETs.
             * @enum {string}
             */
            Status?: "ACTIVE" | "DELETED";
            /**
             * Format: uuid
             * @description The Xero identifier for an contact group – specified as a string following the endpoint name. e.g. /297c2dc5-cc47-4afd-8ec8-74990b8761e9
             */
            ContactGroupID?: string;
            /** @description The ContactID and Name of Contacts in a contact group. Returned on GETs when the ContactGroupID is supplied in the URL. */
            Contacts?: components["schemas"]["Contact"][];
        };
        RequestEmpty: {
            /** @description Need at least one field to create an empty JSON payload */
            Status?: string;
        };
        CreditNotes: {
            CreditNotes?: components["schemas"]["CreditNote"][];
        };
        CreditNote: {
            /**
             * @description See Credit Note Types
             * @enum {string}
             */
            Type?: "ACCPAYCREDIT" | "ACCRECCREDIT";
            Contact?: components["schemas"]["Contact"];
            /** @description The date the credit note is issued YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation */
            Date?: string;
            /** @description Date invoice is due – YYYY-MM-DD */
            DueDate?: string;
            /**
             * @description See Credit Note Status Codes
             * @enum {string}
             */
            Status?: "DRAFT" | "SUBMITTED" | "DELETED" | "AUTHORISED" | "PAID" | "VOIDED";
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /** @description See Invoice Line Items */
            LineItems?: components["schemas"]["LineItem"][];
            /**
             * Format: double
             * @description The subtotal of the credit note excluding taxes
             */
            SubTotal?: number;
            /**
             * Format: double
             * @description The total tax on the credit note
             */
            TotalTax?: number;
            /**
             * Format: double
             * @description The total of the Credit Note(subtotal + total tax)
             */
            Total?: number;
            /**
             * Format: double
             * @description CIS deduction for UK contractors
             */
            readonly CISDeduction?: number;
            /**
             * Format: double
             * @description CIS Deduction rate for the organisation
             */
            readonly CISRate?: number;
            /**
             * @description UTC timestamp of last update to the credit note
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /** @description The specified currency code */
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /** @description Date when credit note was fully paid(UTC format) */
            FullyPaidOnDate?: string;
            /**
             * Format: uuid
             * @description Xero generated unique identifier
             */
            CreditNoteID?: string;
            /** @description ACCRECCREDIT – Unique alpha numeric code identifying credit note (when missing will auto-generate from your Organisation Invoice Settings) */
            CreditNoteNumber?: string;
            /** @description ACCRECCREDIT only – additional reference number */
            Reference?: string;
            /** @description boolean to indicate if a credit note has been sent to a contact via  the Xero app (currently read only) */
            readonly SentToContact?: boolean;
            /**
             * Format: double
             * @description The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used
             */
            CurrencyRate?: number;
            /**
             * Format: double
             * @description The remaining credit balance on the Credit Note
             */
            RemainingCredit?: number;
            /** @description See Allocations */
            Allocations?: components["schemas"]["Allocation"][];
            /**
             * Format: double
             * @description The amount of applied to an invoice
             * @example 2
             */
            AppliedAmount?: number;
            /** @description See Payments */
            Payments?: components["schemas"]["Payment"][];
            /**
             * Format: uuid
             * @description See BrandingThemes
             */
            BrandingThemeID?: string;
            /** @description A string to indicate if a invoice status */
            StatusAttributeString?: string;
            /**
             * @description boolean to indicate if a credit note has an attachment
             * @default false
             * @example false
             */
            HasAttachments: boolean;
            /**
             * @description A boolean to indicate if a credit note has an validation errors
             * @default false
             * @example false
             */
            HasErrors: boolean;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
            /** @description Displays array of warning messages from the API */
            Warnings?: components["schemas"]["ValidationError"][];
        };
        Allocations: {
            Allocations?: components["schemas"]["Allocation"][];
        };
        Allocation: {
            /**
             * Format: uuid
             * @description Xero generated unique identifier
             */
            AllocationID?: string;
            Invoice: components["schemas"]["Invoice"];
            Overpayment?: components["schemas"]["Overpayment"];
            Prepayment?: components["schemas"]["Prepayment"];
            CreditNote?: components["schemas"]["CreditNote"];
            /**
             * Format: double
             * @description the amount being applied to the invoice
             */
            Amount: number;
            /** @description the date the allocation is applied YYYY-MM-DD. */
            Date: string;
            /** @description A flag that returns true when the allocation is succesfully deleted */
            readonly IsDeleted?: boolean;
            /** @description A string to indicate if a invoice status */
            StatusAttributeString?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        Currencies: {
            Currencies?: components["schemas"]["Currency"][];
        };
        Currency: {
            Code?: components["schemas"]["CurrencyCode"];
            /** @description Name of Currency */
            Description?: string;
        };
        /**
         * @description 3 letter alpha code for the currency – see list of currency codes
         * @enum {string}
         */
        CurrencyCode: "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AUD" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BYR" | "BZD" | "CAD" | "CDF" | "CHF" | "CLF" | "CLP" | "CNY" | "COP" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EEK" | "EGP" | "ERN" | "ETB" | "EUR" | "FJD" | "FKP" | "GBP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "INR" | "IQD" | "IRR" | "ISK" | "JMD" | "JOD" | "JPY" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LTL" | "LVL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRO" | "MRU" | "MUR" | "MVR" | "MWK" | "MXN" | "MXV" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "NZD" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SEK" | "SGD" | "SHP" | "SKK" | "SLE" | "SLL" | "SOS" | "SRD" | "STD" | "STN" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USD" | "UYU" | "UZS" | "VEF" | "VES" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XOF" | "XPF" | "YER" | "ZAR" | "ZMW" | "ZMK" | "ZWD";
        Employees: {
            Employees?: components["schemas"]["Employee"][];
        };
        Employee: {
            /**
             * Format: uuid
             * @description The Xero identifier for an employee e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
             */
            EmployeeID?: string;
            /**
             * @description Current status of an employee – see contact status types
             * @enum {string}
             */
            Status?: "ACTIVE" | "ARCHIVED" | "GDPRREQUEST" | "DELETED";
            /** @description First name of an employee (max length = 255) */
            FirstName?: string;
            /** @description Last name of an employee (max length = 255) */
            LastName?: string;
            ExternalLink?: components["schemas"]["ExternalLink"];
            /** @example /Date(1573755038314)/ */
            readonly UpdatedDateUTC?: string;
            /**
             * @description A string to indicate if a invoice status
             * @example ERROR
             */
            StatusAttributeString?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        ExpenseClaims: {
            ExpenseClaims?: components["schemas"]["ExpenseClaim"][];
        };
        ExpenseClaim: {
            /**
             * Format: uuid
             * @description Xero generated unique identifier for an expense claim
             */
            ExpenseClaimID?: string;
            /**
             * @description Current status of an expense claim – see status types
             * @enum {string}
             */
            Status?: "SUBMITTED" | "AUTHORISED" | "PAID" | "VOIDED" | "DELETED";
            /** @description See Payments */
            Payments?: components["schemas"]["Payment"][];
            User?: components["schemas"]["User"];
            Receipts?: components["schemas"]["Receipt"][];
            /**
             * @description Last modified date UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /**
             * Format: double
             * @description The total of an expense claim being paid
             */
            readonly Total?: number;
            /**
             * Format: double
             * @description The amount due to be paid for an expense claim
             */
            readonly AmountDue?: number;
            /**
             * Format: double
             * @description The amount still to pay for an expense claim
             */
            readonly AmountPaid?: number;
            /** @description The date when the expense claim is due to be paid YYYY-MM-DD */
            readonly PaymentDueDate?: string;
            /** @description The date the expense claim will be reported in Xero YYYY-MM-DD */
            readonly ReportingDate?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for the Receipt e.g. e59a2c7f-1306-4078-a0f3-73537afcbba9
             */
            ReceiptID?: string;
        };
        HistoryRecords: {
            HistoryRecords?: components["schemas"]["HistoryRecord"][];
        };
        HistoryRecord: {
            /** @description details */
            Details?: string;
            /** @description Name of branding theme */
            Changes?: string;
            /** @description has a value of 0 */
            User?: string;
            /**
             * @description UTC timestamp of creation date of branding theme
             * @example /Date(1573755038314)/
             */
            readonly DateUTC?: string;
        };
        Invoices: {
            Invoices?: components["schemas"]["Invoice"][];
        };
        Invoice: {
            /**
             * @description See Invoice Types
             * @enum {string}
             */
            Type?: "ACCPAY" | "ACCPAYCREDIT" | "APOVERPAYMENT" | "APPREPAYMENT" | "ACCREC" | "ACCRECCREDIT" | "AROVERPAYMENT" | "ARPREPAYMENT";
            Contact?: components["schemas"]["Contact"];
            /** @description See LineItems */
            LineItems?: components["schemas"]["LineItem"][];
            /** @description Date invoice was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation */
            Date?: string;
            /** @description Date invoice is due – YYYY-MM-DD */
            DueDate?: string;
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /** @description ACCREC – Unique alpha numeric code identifying invoice (when missing will auto-generate from your Organisation Invoice Settings) (max length = 255) */
            InvoiceNumber?: string;
            /** @description ACCREC only – additional reference number */
            Reference?: string;
            /**
             * Format: uuid
             * @description See BrandingThemes
             */
            BrandingThemeID?: string;
            /** @description URL link to a source document – shown as “Go to [appName]” in the Xero app */
            Url?: string;
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /**
             * Format: double
             * @description The currency rate for a multicurrency invoice. If no rate is specified, the XE.com day rate is used. (max length = [18].[6])
             */
            CurrencyRate?: number;
            /**
             * @description See Invoice Status Codes
             * @enum {string}
             */
            Status?: "DRAFT" | "SUBMITTED" | "DELETED" | "AUTHORISED" | "PAID" | "VOIDED";
            /** @description Boolean to set whether the invoice in the Xero app should be marked as “sent”. This can be set only on invoices that have been approved */
            SentToContact?: boolean;
            /** @description Shown on sales invoices (Accounts Receivable) when this has been set */
            ExpectedPaymentDate?: string;
            /** @description Shown on bills (Accounts Payable) when this has been set */
            PlannedPaymentDate?: string;
            /**
             * Format: double
             * @description CIS deduction for UK contractors
             */
            readonly CISDeduction?: number;
            /**
             * Format: double
             * @description CIS Deduction rate for the organisation
             */
            readonly CISRate?: number;
            /**
             * Format: double
             * @description Total of invoice excluding taxes
             */
            readonly SubTotal?: number;
            /**
             * Format: double
             * @description Total tax on invoice
             */
            readonly TotalTax?: number;
            /**
             * Format: double
             * @description Total of Invoice tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
             */
            readonly Total?: number;
            /**
             * Format: double
             * @description Total of discounts applied on the invoice line items
             */
            readonly TotalDiscount?: number;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for invoice
             */
            InvoiceID?: string;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for repeating invoices
             */
            RepeatingInvoiceID?: string;
            /**
             * @description boolean to indicate if an invoice has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /** @description boolean to indicate if an invoice has a discount */
            readonly IsDiscounted?: boolean;
            /** @description See Payments */
            readonly Payments?: components["schemas"]["Payment"][];
            /** @description See Prepayments */
            readonly Prepayments?: components["schemas"]["Prepayment"][];
            /** @description See Overpayments */
            readonly Overpayments?: components["schemas"]["Overpayment"][];
            /**
             * Format: double
             * @description Amount remaining to be paid on invoice
             */
            readonly AmountDue?: number;
            /**
             * Format: double
             * @description Sum of payments received for invoice
             */
            readonly AmountPaid?: number;
            /** @description The date the invoice was fully paid. Only returned on fully paid invoices */
            readonly FullyPaidOnDate?: string;
            /**
             * Format: double
             * @description Sum of all credit notes, over-payments and pre-payments applied to invoice
             */
            readonly AmountCredited?: number;
            /**
             * @description Last modified date UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /** @description Details of credit notes that have been applied to an invoice */
            readonly CreditNotes?: components["schemas"]["CreditNote"][];
            /** @description Displays array of attachments from the API */
            Attachments?: components["schemas"]["Attachment"][];
            /**
             * @description A boolean to indicate if a invoice has an validation errors
             * @default false
             * @example false
             */
            HasErrors: boolean;
            /** @description A string to indicate if a invoice status */
            StatusAttributeString?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
            /** @description Displays array of warning messages from the API */
            Warnings?: components["schemas"]["ValidationError"][];
        };
        OnlineInvoices: {
            OnlineInvoices?: components["schemas"]["OnlineInvoice"][];
        };
        OnlineInvoice: {
            /** @description the URL to an online invoice */
            OnlineInvoiceUrl?: string;
        };
        InvoiceReminders: {
            InvoiceReminders?: components["schemas"]["InvoiceReminder"][];
        };
        InvoiceReminder: {
            /** @description setting for on or off */
            Enabled?: boolean;
        };
        Items: {
            Items?: components["schemas"]["Item"][];
        };
        Item: {
            /** @description User defined item code (max length = 30) */
            Code: string;
            /** @description The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item */
            InventoryAssetAccountCode?: string;
            /** @description The name of the item (max length = 50) */
            Name?: string;
            /** @description Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled. */
            IsSold?: boolean;
            /** @description Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled. */
            IsPurchased?: boolean;
            /** @description The sales description of the item (max length = 4000) */
            Description?: string;
            /** @description The purchase description of the item (max length = 4000) */
            PurchaseDescription?: string;
            PurchaseDetails?: components["schemas"]["Purchase"];
            SalesDetails?: components["schemas"]["Purchase"];
            /** @description True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set. */
            IsTrackedAsInventory?: boolean;
            /**
             * Format: double
             * @description The value of the item on hand. Calculated using average cost accounting.
             */
            TotalCostPool?: number;
            /**
             * Format: double
             * @description The quantity of the item on hand
             */
            QuantityOnHand?: number;
            /**
             * @description Last modified date in UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for an Item
             */
            ItemID?: string;
            /** @description Status of object */
            StatusAttributeString?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        Purchase: {
            /**
             * Format: double
             * @description Unit Price of the item. By default UnitPrice is rounded to two decimal places. You can use 4 decimal places by adding the unitdp=4 querystring parameter to your request.
             */
            UnitPrice?: number;
            /** @description Default account code to be used for purchased/sale. Not applicable to the purchase details of tracked items */
            AccountCode?: string;
            /** @description Cost of goods sold account. Only applicable to the purchase details of tracked items. */
            COGSAccountCode?: string;
            /** @description The tax type from TaxRates */
            TaxType?: string;
        };
        Journals: {
            Journals?: components["schemas"]["Journal"][];
        };
        Journal: {
            /**
             * Format: uuid
             * @description Xero identifier
             */
            JournalID?: string;
            /** @description Date the journal was posted */
            JournalDate?: string;
            /** @description Xero generated journal number */
            JournalNumber?: number;
            /**
             * @description Created date UTC format
             * @example /Date(1573755038314)/
             */
            readonly CreatedDateUTC?: string;
            /** @description reference field for additional indetifying information */
            Reference?: string;
            /**
             * Format: uuid
             * @description The identifier for the source transaction (e.g. InvoiceID)
             */
            SourceID?: string;
            /**
             * @description The journal source type. The type of transaction that created the journal
             * @enum {string}
             */
            SourceType?: "ACCREC" | "ACCPAY" | "ACCRECCREDIT" | "ACCPAYCREDIT" | "ACCRECPAYMENT" | "ACCPAYPAYMENT" | "ARCREDITPAYMENT" | "APCREDITPAYMENT" | "CASHREC" | "CASHPAID" | "TRANSFER" | "ARPREPAYMENT" | "APPREPAYMENT" | "AROVERPAYMENT" | "APOVERPAYMENT" | "EXPCLAIM" | "EXPPAYMENT" | "MANJOURNAL" | "PAYSLIP" | "WAGEPAYABLE" | "INTEGRATEDPAYROLLPE" | "INTEGRATEDPAYROLLPT" | "EXTERNALSPENDMONEY" | "INTEGRATEDPAYROLLPTPAYMENT" | "INTEGRATEDPAYROLLCN";
            /** @description See JournalLines */
            JournalLines?: components["schemas"]["JournalLine"][];
        };
        JournalLine: {
            /**
             * Format: uuid
             * @description Xero identifier for Journal
             * @example 7be9db36-3598-4755-ba5c-c2dbc8c4a7a2
             */
            JournalLineID?: string;
            /**
             * Format: uuid
             * @description See Accounts
             * @example ceef66a5-a545-413b-9312-78a53caadbc4
             */
            AccountID?: string;
            /**
             * @description See Accounts
             * @example 90
             */
            AccountCode?: string;
            AccountType?: components["schemas"]["AccountType"];
            /**
             * @description See AccountCodes
             * @example Checking Account
             */
            AccountName?: string;
            /**
             * @description The description from the source transaction line item. Only returned if populated.
             * @example My business checking account
             */
            Description?: string;
            /**
             * Format: double
             * @description Net amount of journal line. This will be a positive value for a debit and negative for a credit
             * @example 4130.98
             */
            NetAmount?: number;
            /**
             * Format: double
             * @description Gross amount of journal line (NetAmount + TaxAmount).
             * @example 4130.98
             */
            GrossAmount?: number;
            /**
             * Format: double
             * @description Total tax on a journal line
             * @example 0
             */
            readonly TaxAmount?: number;
            /** @description The tax type from taxRates */
            TaxType?: string;
            /**
             * @description see TaxRates
             * @example Tax Exempt
             */
            TaxName?: string;
            /** @description Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements. */
            TrackingCategories?: components["schemas"]["TrackingCategory"][];
        };
        LinkedTransactions: {
            LinkedTransactions?: components["schemas"]["LinkedTransaction"][];
        };
        LinkedTransaction: {
            /**
             * Format: uuid
             * @description Filter by the SourceTransactionID. Get all the linked transactions created from a particular ACCPAY invoice
             */
            SourceTransactionID?: string;
            /**
             * Format: uuid
             * @description The line item identifier from the source transaction.
             */
            SourceLineItemID?: string;
            /**
             * Format: uuid
             * @description Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
             */
            ContactID?: string;
            /**
             * Format: uuid
             * @description Filter by the TargetTransactionID. Get all the linked transactions  allocated to a particular ACCREC invoice
             */
            TargetTransactionID?: string;
            /**
             * Format: uuid
             * @description The line item identifier from the target transaction. It is possible  to link multiple billable expenses to the same TargetLineItemID.
             */
            TargetLineItemID?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for an Linked Transaction e.g./LinkedTransactions/297c2dc5-cc47-4afd-8ec8-74990b8761e9
             */
            LinkedTransactionID?: string;
            /**
             * @description Filter by the combination of ContactID and Status. Get all the linked transactions that have been assigned to a particular customer and have a particular status e.g. GET /LinkedTransactions?ContactID=4bb34b03-3378-4bb2-a0ed-6345abf3224e&Status=APPROVED.
             * @enum {string}
             */
            Status?: "APPROVED" | "DRAFT" | "ONDRAFT" | "BILLED" | "VOIDED";
            /**
             * @description This will always be BILLABLEEXPENSE. More types may be added in future.
             * @enum {string}
             */
            Type?: "BILLABLEEXPENSE";
            /**
             * @description The last modified date in UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /**
             * @description The Type of the source tranasction. This will be ACCPAY if the linked transaction was created from an invoice and SPEND if it was created from a bank transaction.
             * @enum {string}
             */
            SourceTransactionTypeCode?: "ACCPAY" | "SPEND";
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        ManualJournals: {
            ManualJournals?: components["schemas"]["ManualJournal"][];
        };
        ManualJournal: {
            /** @description Description of journal being posted */
            Narration: string;
            /** @description See JournalLines */
            JournalLines?: components["schemas"]["ManualJournalLine"][];
            /** @description Date journal was posted – YYYY-MM-DD */
            Date?: string;
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /**
             * @description See Manual Journal Status Codes
             * @enum {string}
             */
            Status?: "DRAFT" | "POSTED" | "DELETED" | "VOIDED" | "ARCHIVED";
            /** @description Url link to a source document – shown as “Go to [appName]” in the Xero app */
            Url?: string;
            /** @description Boolean – default is true if not specified */
            ShowOnCashBasisReports?: boolean;
            /**
             * @description Boolean to indicate if a manual journal has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /**
             * @description Last modified date UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for a Manual Journal
             */
            ManualJournalID?: string;
            /**
             * @description A string to indicate if a invoice status
             * @example ERROR
             */
            StatusAttributeString?: string;
            /** @description Displays array of warning messages from the API */
            Warnings?: components["schemas"]["ValidationError"][];
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
            /** @description Displays array of attachments from the API */
            Attachments?: components["schemas"]["Attachment"][];
        };
        ManualJournalLine: {
            /**
             * Format: double
             * @description total for line. Debits are positive, credits are negative value
             * @example -2569
             */
            LineAmount?: number;
            /**
             * @description See Accounts
             * @example 720
             */
            AccountCode?: string;
            /**
             * Format: uuid
             * @description See Accounts
             */
            AccountID?: string;
            /**
             * @description Description for journal line
             * @example Coded incorrectly Office Equipment should be Computer Equipment
             */
            Description?: string;
            /** @description The tax type from TaxRates */
            TaxType?: string;
            /** @description Optional Tracking Category – see Tracking. Any JournalLine can have a maximum of 2 <TrackingCategory> elements. */
            Tracking?: components["schemas"]["TrackingCategory"][];
            /**
             * Format: double
             * @description The calculated tax amount based on the TaxType and LineAmount
             * @example 0
             */
            TaxAmount?: number;
            /**
             * @description is the line blank
             * @example false
             */
            IsBlank?: boolean;
        };
        Actions: {
            Actions?: components["schemas"]["Action"][];
        };
        Action: {
            /**
             * @description Name of the actions for this organisation
             * @example UseMulticurrency
             */
            Name?: string;
            /**
             * @description Status of the action for this organisation
             * @enum {string}
             */
            Status?: "ALLOWED" | "NOT-ALLOWED";
        };
        Organisations: {
            Organisations?: components["schemas"]["Organisation"][];
        };
        Organisation: {
            /**
             * Format: uuid
             * @description Unique Xero identifier
             * @example 8be9db36-3598-4755-ba5c-c2dbc8c4a7a2
             */
            OrganisationID?: string;
            /** @description Display a unique key used for Xero-to-Xero transactions */
            APIKey?: string;
            /** @description Display name of organisation shown in Xero */
            Name?: string;
            /** @description Organisation name shown on Reports */
            LegalName?: string;
            /** @description Boolean to describe if organisation is registered with a local tax authority i.e. true, false */
            PaysTax?: boolean;
            /**
             * @description See Version Types
             * @enum {string}
             */
            Version?: "AU" | "NZ" | "GLOBAL" | "UK" | "US" | "AUONRAMP" | "NZONRAMP" | "GLOBALONRAMP" | "UKONRAMP" | "USONRAMP";
            /**
             * @description Organisation Type
             * @enum {string}
             */
            OrganisationType?: "ACCOUNTING_PRACTICE" | "COMPANY" | "CHARITY" | "CLUB_OR_SOCIETY" | "INDIVIDUAL" | "LOOK_THROUGH_COMPANY" | "NOT_FOR_PROFIT" | "PARTNERSHIP" | "S_CORPORATION" | "SELF_MANAGED_SUPERANNUATION_FUND" | "SOLE_TRADER" | "SUPERANNUATION_FUND" | "TRUST";
            BaseCurrency?: components["schemas"]["CurrencyCode"];
            CountryCode?: components["schemas"]["CountryCode"];
            /** @description Boolean to describe if organisation is a demo company. */
            IsDemoCompany?: boolean;
            /** @description Will be set to ACTIVE if you can connect to organisation via the Xero API */
            OrganisationStatus?: string;
            /** @description Shows for New Zealand, Australian and UK organisations */
            RegistrationNumber?: string;
            /** @description Shown if set. US Only. */
            EmployerIdentificationNumber?: string;
            /** @description Shown if set. Displays in the Xero UI as Tax File Number (AU), GST Number (NZ), VAT Number (UK) and Tax ID Number (US & Global). */
            TaxNumber?: string;
            /** @description Calendar day e.g. 0-31 */
            FinancialYearEndDay?: number;
            /** @description Calendar Month e.g. 1-12 */
            FinancialYearEndMonth?: number;
            /**
             * @description The accounting basis used for tax returns. See Sales Tax Basis
             * @enum {string}
             */
            SalesTaxBasis?: "PAYMENTS" | "INVOICE" | "NONE" | "CASH" | "ACCRUAL" | "FLATRATECASH" | "FLATRATEACCRUAL" | "ACCRUALS";
            /**
             * @description The frequency with which tax returns are processed. See Sales Tax Period
             * @enum {string}
             */
            SalesTaxPeriod?: "MONTHLY" | "QUARTERLY1" | "QUARTERLY2" | "QUARTERLY3" | "ANNUALLY" | "ONEMONTHS" | "TWOMONTHS" | "SIXMONTHS" | "1MONTHLY" | "2MONTHLY" | "3MONTHLY" | "6MONTHLY" | "QUARTERLY" | "YEARLY" | "NONE";
            /** @description The default for LineAmountTypes on sales transactions */
            DefaultSalesTax?: string;
            /** @description The default for LineAmountTypes on purchase transactions */
            DefaultPurchasesTax?: string;
            /** @description Shown if set. See lock dates */
            PeriodLockDate?: string;
            /** @description Shown if set. See lock dates */
            EndOfYearLockDate?: string;
            /**
             * @description Timestamp when the organisation was created in Xero
             * @example /Date(1573755038314)/
             */
            readonly CreatedDateUTC?: string;
            Timezone?: components["schemas"]["TimeZone"];
            /**
             * @description Organisation Entity Type
             * @enum {string}
             */
            OrganisationEntityType?: "ACCOUNTING_PRACTICE" | "COMPANY" | "CHARITY" | "CLUB_OR_SOCIETY" | "INDIVIDUAL" | "LOOK_THROUGH_COMPANY" | "NOT_FOR_PROFIT" | "PARTNERSHIP" | "S_CORPORATION" | "SELF_MANAGED_SUPERANNUATION_FUND" | "SOLE_TRADER" | "SUPERANNUATION_FUND" | "TRUST";
            /** @description A unique identifier for the organisation. Potential uses. */
            ShortCode?: string;
            /**
             * @description Organisation Classes describe which plan the Xero organisation is on (e.g. DEMO, TRIAL, PREMIUM)
             * @enum {string}
             */
            Class?: "DEMO" | "TRIAL" | "STARTER" | "STANDARD" | "PREMIUM" | "PREMIUM_20" | "PREMIUM_50" | "PREMIUM_100" | "LEDGER" | "GST_CASHBOOK" | "NON_GST_CASHBOOK" | "ULTIMATE" | "LITE" | "IGNITE" | "GROW" | "COMPREHENSIVE";
            /**
             * @description BUSINESS or PARTNER. Partner edition organisations are sold exclusively through accounting partners and have restricted functionality (e.g. no access to invoicing)
             * @enum {string}
             */
            Edition?: "BUSINESS" | "PARTNER";
            /** @description Description of business type as defined in Organisation settings */
            LineOfBusiness?: string;
            /** @description Address details for organisation – see Addresses */
            Addresses?: components["schemas"]["AddressForOrganisation"][];
            /** @description Phones details for organisation – see Phones */
            Phones?: components["schemas"]["Phone"][];
            /** @description Organisation profile links for popular services such as Facebook,Twitter, GooglePlus and LinkedIn. You can also add link to your website here. Shown if Organisation settings  is updated in Xero. See ExternalLinks below */
            ExternalLinks?: components["schemas"]["ExternalLink"][];
            PaymentTerms?: components["schemas"]["PaymentTerm"];
        };
        /** @enum {string} */
        CountryCode: "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AN" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BR" | "BS" | "BT" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GQ" | "GR" | "GT" | "GU" | "GW" | "GY" | "HK" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TC" | "TD" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW";
        /**
         * @description Timezone specifications
         * @enum {string}
         */
        TimeZone: "AFGHANISTANSTANDARDTIME" | "ALASKANSTANDARDTIME" | "ALEUTIANSTANDARDTIME" | "ALTAISTANDARDTIME" | "ARABIANSTANDARDTIME" | "ARABICSTANDARDTIME" | "ARABSTANDARDTIME" | "ARGENTINASTANDARDTIME" | "ASTRAKHANSTANDARDTIME" | "ATLANTICSTANDARDTIME" | "AUSCENTRALSTANDARDTIME" | "AUSCENTRALWSTANDARDTIME" | "AUSEASTERNSTANDARDTIME" | "AZERBAIJANSTANDARDTIME" | "AZORESSTANDARDTIME" | "BAHIASTANDARDTIME" | "BANGLADESHSTANDARDTIME" | "BELARUSSTANDARDTIME" | "BOUGAINVILLESTANDARDTIME" | "CANADACENTRALSTANDARDTIME" | "CAPEVERDESTANDARDTIME" | "CAUCASUSSTANDARDTIME" | "CENAUSTRALIASTANDARDTIME" | "CENTRALAMERICASTANDARDTIME" | "CENTRALASIASTANDARDTIME" | "CENTRALBRAZILIANSTANDARDTIME" | "CENTRALEUROPEANSTANDARDTIME" | "CENTRALEUROPESTANDARDTIME" | "CENTRALPACIFICSTANDARDTIME" | "CENTRALSTANDARDTIME" | "CENTRALSTANDARDTIME(MEXICO)" | "CHATHAMISLANDSSTANDARDTIME" | "CHINASTANDARDTIME" | "CUBASTANDARDTIME" | "DATELINESTANDARDTIME" | "EAFRICASTANDARDTIME" | "EASTERISLANDSTANDARDTIME" | "EASTERNSTANDARDTIME" | "EASTERNSTANDARDTIME(MEXICO)" | "EAUSTRALIASTANDARDTIME" | "EEUROPESTANDARDTIME" | "EGYPTSTANDARDTIME" | "EKATERINBURGSTANDARDTIME" | "ESOUTHAMERICASTANDARDTIME" | "FIJISTANDARDTIME" | "FLESTANDARDTIME" | "GEORGIANSTANDARDTIME" | "GMTSTANDARDTIME" | "GREENLANDSTANDARDTIME" | "GREENWICHSTANDARDTIME" | "GTBSTANDARDTIME" | "HAITISTANDARDTIME" | "HAWAIIANSTANDARDTIME" | "INDIASTANDARDTIME" | "IRANSTANDARDTIME" | "ISRAELSTANDARDTIME" | "JORDANSTANDARDTIME" | "KALININGRADSTANDARDTIME" | "KAMCHATKASTANDARDTIME" | "KOREASTANDARDTIME" | "LIBYASTANDARDTIME" | "LINEISLANDSSTANDARDTIME" | "LORDHOWESTANDARDTIME" | "MAGADANSTANDARDTIME" | "MAGALLANESSTANDARDTIME" | "MARQUESASSTANDARDTIME" | "MAURITIUSSTANDARDTIME" | "MIDATLANTICSTANDARDTIME" | "MIDDLEEASTSTANDARDTIME" | "MONTEVIDEOSTANDARDTIME" | "MOROCCOSTANDARDTIME" | "MOUNTAINSTANDARDTIME" | "MOUNTAINSTANDARDTIME(MEXICO)" | "MYANMARSTANDARDTIME" | "NAMIBIASTANDARDTIME" | "NCENTRALASIASTANDARDTIME" | "NEPALSTANDARDTIME" | "NEWFOUNDLANDSTANDARDTIME" | "NEWZEALANDSTANDARDTIME" | "NORFOLKSTANDARDTIME" | "NORTHASIAEASTSTANDARDTIME" | "NORTHASIASTANDARDTIME" | "NORTHKOREASTANDARDTIME" | "OMSKSTANDARDTIME" | "PACIFICSASTANDARDTIME" | "PACIFICSTANDARDTIME" | "PACIFICSTANDARDTIME(MEXICO)" | "PAKISTANSTANDARDTIME" | "PARAGUAYSTANDARDTIME" | "QYZYLORDASTANDARDTIME" | "ROMANCESTANDARDTIME" | "RUSSIANSTANDARDTIME" | "RUSSIATIMEZONE10" | "RUSSIATIMEZONE11" | "RUSSIATIMEZONE3" | "SAEASTERNSTANDARDTIME" | "SAINTPIERRESTANDARDTIME" | "SAKHALINSTANDARDTIME" | "SAMOASTANDARDTIME" | "SAOTOMESTANDARDTIME" | "SAPACIFICSTANDARDTIME" | "SARATOVSTANDARDTIME" | "SAWESTERNSTANDARDTIME" | "SEASIASTANDARDTIME" | "SINGAPORESTANDARDTIME" | "SOUTHAFRICASTANDARDTIME" | "SOUTHSUDANSTANDARDTIME" | "SRILANKASTANDARDTIME" | "SUDANSTANDARDTIME" | "SYRIASTANDARDTIME" | "TAIPEISTANDARDTIME" | "TASMANIASTANDARDTIME" | "TOCANTINSSTANDARDTIME" | "TOKYOSTANDARDTIME" | "TOMSKSTANDARDTIME" | "TONGASTANDARDTIME" | "TRANSBAIKALSTANDARDTIME" | "TURKEYSTANDARDTIME" | "TURKSANDCAICOSSTANDARDTIME" | "ULAANBAATARSTANDARDTIME" | "USEASTERNSTANDARDTIME" | "USMOUNTAINSTANDARDTIME" | "UTC" | "UTC+12" | "UTC+13" | "UTC02" | "UTC08" | "UTC09" | "UTC11" | "VENEZUELASTANDARDTIME" | "VLADIVOSTOKSTANDARDTIME" | "VOLGOGRADSTANDARDTIME" | "WAUSTRALIASTANDARDTIME" | "WCENTRALAFRICASTANDARDTIME" | "WESTASIASTANDARDTIME" | "WESTBANKSTANDARDTIME" | "WESTPACIFICSTANDARDTIME" | "WEUROPESTANDARDTIME" | "WMONGOLIASTANDARDTIME" | "YAKUTSKSTANDARDTIME" | "YUKONSTANDARDTIME";
        PaymentTerm: {
            Bills?: components["schemas"]["Bill"];
            Sales?: components["schemas"]["Bill"];
        };
        /** @enum {string} */
        PaymentTermType: "DAYSAFTERBILLDATE" | "DAYSAFTERBILLMONTH" | "OFCURRENTMONTH" | "OFFOLLOWINGMONTH";
        ExternalLink: {
            /**
             * @description See External link types
             * @enum {string}
             */
            LinkType?: "Facebook" | "GooglePlus" | "LinkedIn" | "Twitter" | "Website";
            /** @description URL for service e.g. http://twitter.com/xeroapi */
            Url?: string;
            Description?: string;
        };
        Bill: {
            /** @description Day of Month (0-31) */
            Day?: number;
            Type?: components["schemas"]["PaymentTermType"];
        };
        Overpayments: {
            Overpayments?: components["schemas"]["Overpayment"][];
        };
        Overpayment: {
            /**
             * @description See Overpayment Types
             * @enum {string}
             */
            Type?: "RECEIVE-OVERPAYMENT" | "SPEND-OVERPAYMENT" | "AROVERPAYMENT";
            Contact?: components["schemas"]["Contact"];
            /** @description The date the overpayment is created YYYY-MM-DD */
            Date?: string;
            /**
             * @description See Overpayment Status Codes
             * @enum {string}
             */
            Status?: "AUTHORISED" | "PAID" | "VOIDED";
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /** @description See Overpayment Line Items */
            LineItems?: components["schemas"]["LineItem"][];
            /**
             * Format: double
             * @description The subtotal of the overpayment excluding taxes
             */
            SubTotal?: number;
            /**
             * Format: double
             * @description The total tax on the overpayment
             */
            TotalTax?: number;
            /**
             * Format: double
             * @description The total of the overpayment (subtotal + total tax)
             */
            Total?: number;
            /**
             * @description UTC timestamp of last update to the overpayment
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /**
             * Format: uuid
             * @description Xero generated unique identifier
             */
            OverpaymentID?: string;
            /**
             * Format: double
             * @description The currency rate for a multicurrency overpayment. If no rate is specified, the XE.com day rate is used
             */
            CurrencyRate?: number;
            /**
             * Format: double
             * @description The remaining credit balance on the overpayment
             */
            RemainingCredit?: number;
            /** @description See Allocations */
            Allocations?: components["schemas"]["Allocation"][];
            /**
             * Format: double
             * @description The amount of applied to an invoice
             * @example 2
             */
            AppliedAmount?: number;
            /** @description See Payments */
            Payments?: components["schemas"]["Payment"][];
            /**
             * @description boolean to indicate if a overpayment has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /** @description See Attachments */
            Attachments?: components["schemas"]["Attachment"][];
        };
        Payments: {
            Payments?: components["schemas"]["Payment"][];
        };
        PaymentDelete: {
            /**
             * @description The status of the payment.
             * @default DELETED
             */
            Status: string;
        };
        Payment: {
            Invoice?: components["schemas"]["Invoice"];
            CreditNote?: components["schemas"]["CreditNote"];
            Prepayment?: components["schemas"]["Prepayment"];
            Overpayment?: components["schemas"]["Overpayment"];
            /** @description Number of invoice or credit note you are applying payment to e.g.INV-4003 */
            InvoiceNumber?: string;
            /** @description Number of invoice or credit note you are applying payment to e.g. INV-4003 */
            CreditNoteNumber?: string;
            BatchPayment?: components["schemas"]["BatchPayment"];
            Account?: components["schemas"]["Account"];
            /** @description Code of account you are using to make the payment e.g. 001 (note- not all accounts have a code value) */
            Code?: string;
            /** @description Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06 */
            Date?: string;
            /**
             * Format: double
             * @description Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
             */
            CurrencyRate?: number;
            /**
             * Format: double
             * @description The amount of the payment. Must be less than or equal to the outstanding amount owing on the invoice e.g. 200.00
             */
            Amount?: number;
            /**
             * Format: double
             * @description The amount of the payment in the currency of the bank account.
             */
            BankAmount?: number;
            /** @description An optional description for the payment e.g. Direct Debit */
            Reference?: string;
            /** @description An optional parameter for the payment. A boolean indicating whether you would like the payment to be created as reconciled when using PUT, or whether a payment has been reconciled when using GET */
            IsReconciled?: boolean;
            /**
             * @description The status of the payment.
             * @enum {string}
             */
            Status?: "AUTHORISED" | "DELETED";
            /**
             * @description See Payment Types.
             * @enum {string}
             */
            readonly PaymentType?: "ACCRECPAYMENT" | "ACCPAYPAYMENT" | "ARCREDITPAYMENT" | "APCREDITPAYMENT" | "AROVERPAYMENTPAYMENT" | "ARPREPAYMENTPAYMENT" | "APPREPAYMENTPAYMENT" | "APOVERPAYMENTPAYMENT";
            /**
             * @description UTC timestamp of last update to the payment
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for an Payment e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
             * @example 00000000-0000-0000-0000-000000000000
             */
            PaymentID?: string;
            /**
             * Format: uuid
             * @description Present if the payment was created as part of a batch.
             * @example 00000000-0000-0000-0000-000000000000
             */
            BatchPaymentID?: string;
            /** @description The suppliers bank account number the payment is being made to */
            BankAccountNumber?: string;
            /** @description The suppliers bank account number the payment is being made to */
            Particulars?: string;
            /** @description The information to appear on the supplier's bank account */
            Details?: string;
            /**
             * @description A boolean to indicate if a contact has an validation errors
             * @default false
             * @example false
             */
            HasAccount: boolean;
            /**
             * @description A boolean to indicate if a contact has an validation errors
             * @default false
             * @example false
             */
            HasValidationErrors: boolean;
            /** @description A string to indicate if a invoice status */
            StatusAttributeString?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
            /** @description Displays array of warning messages from the API */
            Warnings?: components["schemas"]["ValidationError"][];
        };
        Prepayments: {
            Prepayments?: components["schemas"]["Prepayment"][];
        };
        Prepayment: {
            /**
             * @description See Prepayment Types
             * @enum {string}
             */
            Type?: "RECEIVE-PREPAYMENT" | "SPEND-PREPAYMENT" | "ARPREPAYMENT" | "APPREPAYMENT";
            Contact?: components["schemas"]["Contact"];
            /** @description The date the prepayment is created YYYY-MM-DD */
            Date?: string;
            /**
             * @description See Prepayment Status Codes
             * @enum {string}
             */
            Status?: "AUTHORISED" | "PAID" | "VOIDED";
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /** @description See Prepayment Line Items */
            LineItems?: components["schemas"]["LineItem"][];
            /**
             * Format: double
             * @description The subtotal of the prepayment excluding taxes
             */
            SubTotal?: number;
            /**
             * Format: double
             * @description The total tax on the prepayment
             */
            TotalTax?: number;
            /**
             * Format: double
             * @description The total of the prepayment(subtotal + total tax)
             */
            Total?: number;
            /** @description Returns Invoice number field. Reference field isn't available. */
            readonly Reference?: string;
            /**
             * @description UTC timestamp of last update to the prepayment
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /**
             * Format: uuid
             * @description Xero generated unique identifier
             */
            PrepaymentID?: string;
            /**
             * Format: double
             * @description The currency rate for a multicurrency prepayment. If no rate is specified, the XE.com day rate is used
             */
            CurrencyRate?: number;
            /**
             * Format: double
             * @description The remaining credit balance on the prepayment
             */
            RemainingCredit?: number;
            /** @description See Allocations */
            Allocations?: components["schemas"]["Allocation"][];
            /** @description See Payments */
            Payments?: components["schemas"]["Payment"][];
            /**
             * Format: double
             * @description The amount of applied to an invoice
             * @example 2
             */
            AppliedAmount?: number;
            /**
             * @description boolean to indicate if a prepayment has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /** @description See Attachments */
            Attachments?: components["schemas"]["Attachment"][];
        };
        PurchaseOrders: {
            PurchaseOrders?: components["schemas"]["PurchaseOrder"][];
        };
        PurchaseOrder: {
            Contact?: components["schemas"]["Contact"];
            /** @description See LineItems */
            LineItems?: components["schemas"]["LineItem"][];
            /** @description Date purchase order was issued – YYYY-MM-DD. If the Date element is not specified then it will default to the current date based on the timezone setting of the organisation */
            Date?: string;
            /** @description Date the goods are to be delivered – YYYY-MM-DD */
            DeliveryDate?: string;
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /** @description Unique alpha numeric code identifying purchase order (when missing will auto-generate from your Organisation Invoice Settings) */
            PurchaseOrderNumber?: string;
            /** @description Additional reference number */
            Reference?: string;
            /**
             * Format: uuid
             * @description See BrandingThemes
             */
            BrandingThemeID?: string;
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /**
             * @description See Purchase Order Status Codes
             * @enum {string}
             */
            Status?: "DRAFT" | "SUBMITTED" | "AUTHORISED" | "BILLED" | "DELETED";
            /** @description Boolean to set whether the purchase order should be marked as “sent”. This can be set only on purchase orders that have been approved or billed */
            SentToContact?: boolean;
            /** @description The address the goods are to be delivered to */
            DeliveryAddress?: string;
            /** @description The person that the delivery is going to */
            AttentionTo?: string;
            /** @description The phone number for the person accepting the delivery */
            Telephone?: string;
            /** @description A free text feild for instructions (500 characters max) */
            DeliveryInstructions?: string;
            /** @description The date the goods are expected to arrive. */
            ExpectedArrivalDate?: string;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for purchase order
             */
            PurchaseOrderID?: string;
            /**
             * Format: double
             * @description The currency rate for a multicurrency purchase order. If no rate is specified, the XE.com day rate is used.
             */
            CurrencyRate?: number;
            /**
             * Format: double
             * @description Total of purchase order excluding taxes
             */
            readonly SubTotal?: number;
            /**
             * Format: double
             * @description Total tax on purchase order
             */
            readonly TotalTax?: number;
            /**
             * Format: double
             * @description Total of Purchase Order tax inclusive (i.e. SubTotal + TotalTax)
             */
            readonly Total?: number;
            /**
             * Format: double
             * @description Total of discounts applied on the purchase order line items
             */
            readonly TotalDiscount?: number;
            /**
             * @description boolean to indicate if a purchase order has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /**
             * @description Last modified date UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /** @description A string to indicate if a invoice status */
            StatusAttributeString?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
            /** @description Displays array of warning messages from the API */
            Warnings?: components["schemas"]["ValidationError"][];
            /** @description Displays array of attachments from the API */
            Attachments?: components["schemas"]["Attachment"][];
        };
        Quotes: {
            Quotes?: components["schemas"]["Quote"][];
        };
        Quote: {
            /**
             * Format: uuid
             * @description QuoteID GUID is automatically generated and is returned after create or GET.
             */
            QuoteID?: string;
            /** @description Unique alpha numeric code identifying a quote (Max Length = 255) */
            QuoteNumber?: string;
            /** @description Additional reference number */
            Reference?: string;
            /** @description Terms of the quote */
            Terms?: string;
            Contact?: components["schemas"]["Contact"];
            /** @description See LineItems */
            LineItems?: components["schemas"]["LineItem"][];
            /** @description Date quote was issued – YYYY-MM-DD. If the Date element is not specified it will default to the current date based on the timezone setting of the organisation */
            Date?: string;
            /** @description Date the quote was issued (YYYY-MM-DD) */
            DateString?: string;
            /** @description Date the quote expires – YYYY-MM-DD. */
            ExpiryDate?: string;
            /** @description Date the quote expires – YYYY-MM-DD. */
            ExpiryDateString?: string;
            Status?: components["schemas"]["QuoteStatusCodes"];
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /**
             * Format: double
             * @description The currency rate for a multicurrency quote
             */
            CurrencyRate?: number;
            /**
             * Format: double
             * @description Total of quote excluding taxes.
             */
            readonly SubTotal?: number;
            /**
             * Format: double
             * @description Total tax on quote
             */
            readonly TotalTax?: number;
            /**
             * Format: double
             * @description Total of Quote tax inclusive (i.e. SubTotal + TotalTax). This will be ignored if it doesn’t equal the sum of the LineAmounts
             */
            readonly Total?: number;
            /**
             * Format: double
             * @description Total of discounts applied on the quote line items
             */
            readonly TotalDiscount?: number;
            /** @description Title text for the quote */
            Title?: string;
            /** @description Summary text for the quote */
            Summary?: string;
            /**
             * Format: uuid
             * @description See BrandingThemes
             */
            BrandingThemeID?: string;
            /**
             * @description Last modified date UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /** @description See Quote Line Amount Types */
            LineAmountTypes?: components["schemas"]["QuoteLineAmountTypes"];
            /** @description A string to indicate if a invoice status */
            StatusAttributeString?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
        };
        /**
         * @description Line amounts are exclusive of tax by default if you don’t specify this element. See Line Amount Types
         * @enum {string}
         */
        QuoteLineAmountTypes: "EXCLUSIVE" | "INCLUSIVE" | "NOTAX";
        /**
         * @description The status of the quote.
         * @enum {string}
         */
        QuoteStatusCodes: "DRAFT" | "SENT" | "DECLINED" | "ACCEPTED" | "INVOICED" | "DELETED";
        Receipts: {
            Receipts?: components["schemas"]["Receipt"][];
        };
        Receipt: {
            /** @description Date of receipt – YYYY-MM-DD */
            Date?: string;
            Contact?: components["schemas"]["Contact"];
            LineItems?: components["schemas"]["LineItem"][];
            User?: components["schemas"]["User"];
            /** @description Additional reference number */
            Reference?: string;
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /**
             * Format: double
             * @description Total of receipt excluding taxes
             */
            SubTotal?: number;
            /**
             * Format: double
             * @description Total tax on receipt
             */
            TotalTax?: number;
            /**
             * Format: double
             * @description Total of receipt tax inclusive (i.e. SubTotal + TotalTax)
             */
            Total?: number;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for receipt
             */
            ReceiptID?: string;
            /**
             * @description Current status of receipt – see status types
             * @enum {string}
             */
            Status?: "DRAFT" | "SUBMITTED" | "AUTHORISED" | "DECLINED" | "VOIDED";
            /** @description Xero generated sequence number for receipt in current claim for a given user */
            readonly ReceiptNumber?: string;
            /**
             * @description Last modified date UTC format
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /**
             * @description boolean to indicate if a receipt has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /** @description URL link to a source document – shown as “Go to [appName]” in the Xero app */
            readonly Url?: string;
            /** @description Displays array of validation error messages from the API */
            ValidationErrors?: components["schemas"]["ValidationError"][];
            /** @description Displays array of warning messages from the API */
            Warnings?: components["schemas"]["ValidationError"][];
            /** @description Displays array of attachments from the API */
            Attachments?: components["schemas"]["Attachment"][];
        };
        RepeatingInvoices: {
            RepeatingInvoices?: components["schemas"]["RepeatingInvoice"][];
        };
        RepeatingInvoice: {
            /**
             * @description See Invoice Types
             * @enum {string}
             */
            Type?: "ACCPAY" | "ACCREC";
            Contact?: components["schemas"]["Contact"];
            Schedule?: components["schemas"]["Schedule"];
            /** @description See LineItems */
            LineItems?: components["schemas"]["LineItem"][];
            LineAmountTypes?: components["schemas"]["LineAmountTypes"];
            /** @description ACCREC only – additional reference number */
            Reference?: string;
            /**
             * Format: uuid
             * @description See BrandingThemes
             */
            BrandingThemeID?: string;
            CurrencyCode?: components["schemas"]["CurrencyCode"];
            /**
             * @description One of the following - DRAFT or AUTHORISED – See Invoice Status Codes
             * @enum {string}
             */
            Status?: "DRAFT" | "AUTHORISED" | "DELETED";
            /**
             * Format: double
             * @description Total of invoice excluding taxes
             */
            SubTotal?: number;
            /**
             * Format: double
             * @description Total tax on invoice
             */
            TotalTax?: number;
            /**
             * Format: double
             * @description Total of Invoice tax inclusive (i.e. SubTotal + TotalTax)
             */
            Total?: number;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for repeating invoice template
             */
            RepeatingInvoiceID?: string;
            /**
             * Format: uuid
             * @description Xero generated unique identifier for repeating invoice template
             */
            ID?: string;
            /**
             * @description Boolean to indicate if an invoice has an attachment
             * @default false
             * @example false
             */
            readonly HasAttachments: boolean;
            /** @description Displays array of attachments from the API */
            Attachments?: components["schemas"]["Attachment"][];
            /**
             * @description Boolean to indicate whether the invoice has been approved for sending
             * @default false
             * @example false
             */
            ApprovedForSending: boolean;
            /**
             * @description Boolean to indicate whether a copy is sent to sender's email
             * @default false
             * @example false
             */
            SendCopy: boolean;
            /**
             * @description Boolean to indicate whether the invoice in the Xero app displays as "sent"
             * @default false
             * @example false
             */
            MarkAsSent: boolean;
            /**
             * @description Boolean to indicate whether to include PDF attachment
             * @default false
             * @example false
             */
            IncludePDF: boolean;
        };
        ReportWithRows: {
            Reports?: components["schemas"]["ReportWithRow"][];
        };
        ReportWithRow: {
            /** @description ID of the Report */
            ReportID?: string;
            /** @description Name of the report */
            ReportName?: string;
            /** @description Title of the report */
            ReportTitle?: string;
            /** @description The type of report (BalanceSheet,ProfitLoss, etc) */
            ReportType?: string;
            /** @description Report titles array (3 to 4 strings with the report name, orgnisation name and time frame of report) */
            ReportTitles?: string[];
            /** @description Date of report */
            ReportDate?: string;
            Rows?: components["schemas"]["ReportRows"][];
            /**
             * @description Updated Date
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            Fields?: components["schemas"]["ReportFields"][];
        };
        ReportRows: {
            RowType?: components["schemas"]["RowType"];
            Title?: string;
            Cells?: components["schemas"]["ReportCell"][];
            Rows?: components["schemas"]["ReportRow"][];
        };
        /** @enum {string} */
        RowType: "Header" | "Section" | "Row" | "SummaryRow";
        ReportRow: {
            RowType?: components["schemas"]["RowType"];
            Title?: string;
            Cells?: components["schemas"]["ReportCell"][];
        };
        ReportCell: {
            Value?: string;
            Attributes?: components["schemas"]["ReportAttribute"][];
        };
        ReportAttribute: {
            Id?: string;
            Value?: string;
        };
        ReportFields: {
            FieldID?: string;
            Description?: string;
            Value?: string;
        };
        Reports: {
            Reports?: components["schemas"]["Report"][];
        };
        Report: {
            /** @description See Prepayment Types */
            ReportName?: string;
            /**
             * @description See Prepayment Types
             * @enum {string}
             */
            ReportType?: "AgedPayablesByContact";
            /** @description See Prepayment Types */
            ReportTitle?: string;
            /** @description Date of report */
            ReportDate?: string;
            /**
             * @description Updated Date
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            Contacts?: components["schemas"]["TenNinetyNineContact"][];
        };
        TenNinetyNineContact: {
            /**
             * Format: double
             * @description Box 1 on 1099 Form
             */
            Box1?: number;
            /**
             * Format: double
             * @description Box 2 on 1099 Form
             */
            Box2?: number;
            /**
             * Format: double
             * @description Box 3 on 1099 Form
             */
            Box3?: number;
            /**
             * Format: double
             * @description Box 4 on 1099 Form
             */
            Box4?: number;
            /**
             * Format: double
             * @description Box 5 on 1099 Form
             */
            Box5?: number;
            /**
             * Format: double
             * @description Box 6 on 1099 Form
             */
            Box6?: number;
            /**
             * Format: double
             * @description Box 7 on 1099 Form
             */
            Box7?: number;
            /**
             * Format: double
             * @description Box 8 on 1099 Form
             */
            Box8?: number;
            /**
             * Format: double
             * @description Box 9 on 1099 Form
             */
            Box9?: number;
            /**
             * Format: double
             * @description Box 10 on 1099 Form
             */
            Box10?: number;
            /**
             * Format: double
             * @description Box 11 on 1099 Form
             */
            Box11?: number;
            /**
             * Format: double
             * @description Box 13 on 1099 Form
             */
            Box13?: number;
            /**
             * Format: double
             * @description Box 14 on 1099 Form
             */
            Box14?: number;
            /** @description Contact name on 1099 Form */
            Name?: string;
            /** @description Contact Fed Tax ID type */
            FederalTaxIDType?: string;
            /** @description Contact city on 1099 Form */
            City?: string;
            /** @description Contact zip on 1099 Form */
            Zip?: string;
            /** @description Contact State on 1099 Form */
            State?: string;
            /** @description Contact email on 1099 Form */
            Email?: string;
            /** @description Contact address on 1099 Form */
            StreetAddress?: string;
            /** @description Contact tax id on 1099 Form */
            TaxID?: string;
            /**
             * Format: uuid
             * @description Contact contact id
             */
            ContactId?: string;
            /** @description Contact legal name */
            LegalName?: string;
            /** @description Contact business name */
            BusinessName?: string;
            /**
             * @description Contact federal tax classification
             * @enum {string}
             */
            FederalTaxClassification?: "SOLE_PROPRIETOR" | "PARTNERSHIP" | "TRUST_OR_ESTATE" | "NONPROFIT" | "C_CORP" | "S_CORP" | "OTHER";
        };
        Schedule: {
            /** @description Integer used with the unit e.g. 1 (every 1 week), 2 (every 2 months) */
            Period?: number;
            /**
             * @description One of the following - WEEKLY or MONTHLY
             * @enum {string}
             */
            Unit?: "WEEKLY" | "MONTHLY";
            /** @description Integer used with due date type e.g 20 (of following month), 31 (of current month) */
            DueDate?: number;
            /**
             * @description the payment terms
             * @enum {string}
             */
            DueDateType?: "DAYSAFTERBILLDATE" | "DAYSAFTERBILLMONTH" | "DAYSAFTERINVOICEDATE" | "DAYSAFTERINVOICEMONTH" | "OFCURRENTMONTH" | "OFFOLLOWINGMONTH";
            /** @description Date the first invoice of the current version of the repeating schedule was generated (changes when repeating invoice is edited) */
            StartDate?: string;
            /** @description The calendar date of the next invoice in the schedule to be generated */
            NextScheduledDate?: string;
            /** @description Invoice end date – only returned if the template has an end date set */
            EndDate?: string;
        };
        TaxRates: {
            TaxRates?: components["schemas"]["TaxRate"][];
        };
        /**
         * @description See Tax Types – can only be used on update calls
         * @enum {string}
         */
        TaxType: "OUTPUT" | "INPUT" | "CAPEXINPUT" | "EXEMPTEXPORT" | "EXEMPTEXPENSES" | "EXEMPTCAPITAL" | "EXEMPTOUTPUT" | "INPUTTAXED" | "BASEXCLUDED" | "GSTONCAPIMPORTS" | "GSTONIMPORTS" | "NONE" | "INPUT2" | "ZERORATED" | "OUTPUT2" | "CAPEXINPUT2" | "CAPEXOUTPUT" | "CAPEXOUTPUT2" | "CAPEXSRINPUT" | "CAPEXSROUTPUT" | "ECACQUISITIONS" | "ECZRINPUT" | "ECZROUTPUT" | "ECZROUTPUTSERVICES" | "EXEMPTINPUT" | "REVERSECHARGES" | "RRINPUT" | "RROUTPUT" | "SRINPUT" | "SROUTPUT" | "ZERORATEDINPUT" | "ZERORATEDOUTPUT" | "BLINPUT" | "DSOUTPUT" | "EPINPUT" | "ES33OUTPUT" | "ESN33OUTPUT" | "IGDSINPUT2" | "IMINPUT2" | "MEINPUT" | "NRINPUT" | "OPINPUT" | "OSOUTPUT" | "TXESSINPUT" | "TXN33INPUT" | "TXPETINPUT" | "TXREINPUT" | "INPUT3" | "INPUT4" | "OUTPUT3" | "OUTPUT4" | "SROUTPUT2" | "TXCA" | "SRCAS" | "BLINPUT2" | "DRCHARGESUPPLY20" | "DRCHARGE20" | "DRCHARGESUPPLY5" | "DRCHARGE5" | "BADDEBTRELIEF" | "IGDSINPUT3" | "SROVR" | "TOURISTREFUND" | "TXRCN33" | "TXRCRE" | "TXRCESS" | "TXRCTS" | "OUTPUTY23" | "DSOUTPUTY23" | "INPUTY23" | "IMINPUT2Y23" | "IGDSINPUT2Y23" | "TXPETINPUTY23" | "TXESSINPUTY23" | "TXN33INPUTY23" | "TXREINPUTY23" | "TXCAY23" | "BADDEBTRELIEFY23" | "IGDSINPUT3Y23" | "SROVRRSY23" | "SROVRLVGY23" | "SRLVGY23" | "TXRCN33Y23" | "TXRCREY23" | "TXRCESSY23" | "TXRCTSY23" | "IM" | "IMY23" | "IMESS" | "IMESSY23" | "IMN33" | "IMN33Y23" | "IMRE" | "IMREY23" | "BADDEBTRECOVERY" | "BADDEBTRECOVERYY23" | "OUTPUTY24" | "DSOUTPUTY24" | "INPUTY24" | "IGDSINPUT2Y24" | "TXPETINPUTY24" | "TXESSINPUTY24" | "TXN33INPUTY24" | "TXREINPUTY24" | "TXCAY24" | "BADDEBTRELIEFY24" | "IGDSINPUT3Y24" | "SROVRRSY24" | "SROVRLVGY24" | "SRLVGY24" | "TXRCTSY24" | "TXRCESSY24" | "TXRCN33Y24" | "TXRCREY24" | "IMY24" | "IMESSY24" | "IMN33Y24" | "IMREY24" | "BADDEBTRECOVERYY24" | "OSOUTPUT2" | "BLINPUT3" | "BLINPUT3Y23" | "BLINPUT3Y24";
        Setup: {
            ConversionDate?: components["schemas"]["ConversionDate"];
            /** @description Balance supplied for each account that has a value as at the conversion date. */
            ConversionBalances?: components["schemas"]["ConversionBalances"][];
            Accounts?: components["schemas"]["Account"][];
        };
        /** @description The date when the organisation starts using Xero */
        ConversionDate: {
            /**
             * @description The month the organisation starts using Xero. Value is an integer between 1 and 12
             * @example 1
             */
            Month?: number;
            /**
             * @description The year the organisation starts using Xero. Value is an integer greater than 2006
             * @example 2020
             */
            Year?: number;
        };
        /** @description Balance supplied for each account that has a value as at the conversion date. */
        ConversionBalances: {
            /** @description The account code for a account */
            AccountCode?: string;
            /**
             * Format: double
             * @description The opening balances of the account. Debits are positive, credits are negative values
             */
            Balance?: number;
            BalanceDetails?: components["schemas"]["BalanceDetails"][];
        };
        /** @description An array to specify multiple currency balances of an account */
        BalanceDetails: {
            /**
             * Format: double
             * @description The opening balances of the account. Debits are positive, credits are negative values
             */
            Balance?: number;
            /** @description The currency of the balance (Not required for base currency) */
            CurrencyCode?: string;
            /**
             * Format: double
             * @description (Optional) Exchange rate to base currency when money is spent or received. If not specified, XE rate for the day is applied
             */
            CurrencyRate?: number;
        };
        ImportSummaryObject: {
            ImportSummary?: components["schemas"]["ImportSummary"];
        };
        /** @description A summary of the import from setup endpoint */
        ImportSummary: {
            Accounts?: components["schemas"]["ImportSummaryAccounts"];
            Organisation?: components["schemas"]["ImportSummaryOrganisation"];
        };
        /** @description A summary of the accounts changes */
        ImportSummaryAccounts: {
            /**
             * Format: int32
             * @description The total number of accounts in the org
             */
            Total?: number;
            /**
             * Format: int32
             * @description The number of new accounts created
             */
            New?: number;
            /**
             * Format: int32
             * @description The number of accounts updated
             */
            Updated?: number;
            /**
             * Format: int32
             * @description The number of accounts deleted
             */
            Deleted?: number;
            /**
             * Format: int32
             * @description The number of locked accounts
             */
            Locked?: number;
            /**
             * Format: int32
             * @description The number of system accounts
             */
            System?: number;
            /**
             * Format: int32
             * @description The number of accounts that had an error
             */
            Errored?: number;
            Present?: boolean;
            /**
             * Format: int32
             * @description The number of new or updated accounts
             */
            NewOrUpdated?: number;
        };
        ImportSummaryOrganisation: {
            Present?: boolean;
        };
        TaxRate: {
            /** @description Name of tax rate */
            Name?: string;
            /** @description The tax type */
            TaxType?: string;
            /** @description See TaxComponents */
            TaxComponents?: components["schemas"]["TaxComponent"][];
            /**
             * @description See Status Codes
             * @enum {string}
             */
            Status?: "ACTIVE" | "DELETED" | "ARCHIVED" | "PENDING";
            /**
             * @description See ReportTaxTypes
             * @enum {string}
             */
            ReportTaxType?: "AVALARA" | "BASEXCLUDED" | "CAPITALSALESOUTPUT" | "CAPITALEXPENSESINPUT" | "ECOUTPUT" | "ECOUTPUTSERVICES" | "ECINPUT" | "ECACQUISITIONS" | "EXEMPTEXPENSES" | "EXEMPTINPUT" | "EXEMPTOUTPUT" | "GSTONIMPORTS" | "INPUT" | "INPUTTAXED" | "MOSSSALES" | "NONE" | "NONEOUTPUT" | "OUTPUT" | "PURCHASESINPUT" | "SALESOUTPUT" | "EXEMPTCAPITAL" | "EXEMPTEXPORT" | "CAPITALEXINPUT" | "GSTONCAPIMPORTS" | "GSTONCAPITALIMPORTS" | "REVERSECHARGES" | "PAYMENTS" | "INVOICE" | "CASH" | "ACCRUAL" | "FLATRATECASH" | "FLATRATEACCRUAL" | "ACCRUALS" | "TXCA" | "SRCAS" | "DSOUTPUT" | "BLINPUT2" | "EPINPUT" | "IMINPUT2" | "MEINPUT" | "IGDSINPUT2" | "ESN33OUTPUT" | "OPINPUT" | "OSOUTPUT" | "TXN33INPUT" | "TXESSINPUT" | "TXREINPUT" | "TXPETINPUT" | "NRINPUT" | "ES33OUTPUT" | "ZERORATEDINPUT" | "ZERORATEDOUTPUT" | "DRCHARGESUPPLY" | "DRCHARGE" | "CAPINPUT" | "CAPIMPORTS" | "IMINPUT" | "INPUT2" | "CIUINPUT" | "SRINPUT" | "OUTPUT2" | "SROUTPUT" | "CAPOUTPUT" | "SROUTPUT2" | "CIUOUTPUT" | "ZROUTPUT" | "ZREXPORT" | "ACC28PLUS" | "ACCUPTO28" | "OTHEROUTPUT" | "SHOUTPUT" | "ZRINPUT" | "BADDEBT" | "OTHERINPUT" | "BADDEBTRELIEF" | "IGDSINPUT3" | "SROVR" | "TOURISTREFUND" | "TXRCN33" | "TXRCRE" | "TXRCESS" | "TXRCTS" | "CAPEXINPUT" | "UNDEFINED" | "CAPEXOUTPUT" | "ZEROEXPOUTPUT" | "GOODSIMPORT" | "NONEINPUT" | "NOTREPORTED" | "SROVRRS" | "SROVRLVG" | "SRLVG" | "IM" | "IMESS" | "IMN33" | "IMRE" | "BADDEBTRECOVERY" | "USSALESTAX" | "BLINPUT3";
            /** @description Boolean to describe if tax rate can be used for asset accounts i.e.  true,false */
            readonly CanApplyToAssets?: boolean;
            /** @description Boolean to describe if tax rate can be used for equity accounts i.e true,false */
            readonly CanApplyToEquity?: boolean;
            /** @description Boolean to describe if tax rate can be used for expense accounts  i.e. true,false */
            readonly CanApplyToExpenses?: boolean;
            /** @description Boolean to describe if tax rate can be used for liability accounts  i.e. true,false */
            readonly CanApplyToLiabilities?: boolean;
            /** @description Boolean to describe if tax rate can be used for revenue accounts i.e. true,false */
            readonly CanApplyToRevenue?: boolean;
            /**
             * Format: double
             * @description Tax Rate (decimal to 4dp) e.g 12.5000
             */
            readonly DisplayTaxRate?: number;
            /**
             * Format: double
             * @description Effective Tax Rate (decimal to 4dp) e.g 12.5000
             */
            readonly EffectiveRate?: number;
        };
        TaxComponent: {
            /** @description Name of Tax Component */
            Name?: string;
            /**
             * Format: double
             * @description Tax Rate (up to 4dp)
             */
            Rate?: number;
            /** @description Boolean to describe if Tax rate is compounded. */
            IsCompound?: boolean;
            /** @description Boolean to describe if tax rate is non-recoverable. Non-recoverable rates are only applicable to Canadian organisations */
            IsNonRecoverable?: boolean;
        };
        TrackingCategories: {
            TrackingCategories?: components["schemas"]["TrackingCategory"][];
        };
        TrackingCategory: {
            /**
             * Format: uuid
             * @description The Xero identifier for a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
             */
            TrackingCategoryID?: string;
            /**
             * Format: uuid
             * @description The Xero identifier for a tracking option e.g. dc54c220-0140-495a-b925-3246adc0075f
             */
            TrackingOptionID?: string;
            /** @description The name of the tracking category e.g. Department, Region (max length = 100) */
            Name?: string;
            /** @description The option name of the tracking option e.g. East, West (max length = 100) */
            Option?: string;
            /**
             * @description The status of a tracking category
             * @enum {string}
             */
            Status?: "ACTIVE" | "ARCHIVED" | "DELETED";
            /** @description See Tracking Options */
            Options?: components["schemas"]["TrackingOption"][];
        };
        TrackingOptions: {
            Options?: components["schemas"]["TrackingOption"][];
        };
        TrackingOption: {
            /**
             * Format: uuid
             * @description The Xero identifier for a tracking option e.g. ae777a87-5ef3-4fa0-a4f0-d10e1f13073a
             */
            TrackingOptionID?: string;
            /** @description The name of the tracking option e.g. Marketing, East (max length = 100) */
            Name?: string;
            /**
             * @description The status of a tracking option
             * @enum {string}
             */
            Status?: "ACTIVE" | "ARCHIVED" | "DELETED";
            /**
             * Format: uuid
             * @description Filter by a tracking category e.g. 297c2dc5-cc47-4afd-8ec8-74990b8761e9
             */
            TrackingCategoryID?: string;
        };
        SalesTrackingCategory: {
            /** @description The default sales tracking category name for contacts */
            TrackingCategoryName?: string;
            /** @description The default purchase tracking category name for contacts */
            TrackingOptionName?: string;
        };
        Users: {
            Users?: components["schemas"]["User"][];
        };
        User: {
            /**
             * Format: uuid
             * @description Xero identifier
             */
            UserID?: string;
            /** @description Email address of user */
            EmailAddress?: string;
            /** @description First name of user */
            FirstName?: string;
            /** @description Last name of user */
            LastName?: string;
            /**
             * @description Timestamp of last change to user
             * @example /Date(1573755038314)/
             */
            readonly UpdatedDateUTC?: string;
            /** @description Boolean to indicate if user is the subscriber */
            IsSubscriber?: boolean;
            /**
             * @description User role that defines permissions in Xero and via API (READONLY, INVOICEONLY, STANDARD, FINANCIALADVISER, etc)
             * @enum {string}
             */
            OrganisationRole?: "READONLY" | "INVOICEONLY" | "STANDARD" | "FINANCIALADVISER" | "MANAGEDCLIENT" | "CASHBOOKCLIENT" | "UNKNOWN";
        };
        Error: {
            /** @description Exception number */
            ErrorNumber?: number;
            /** @description Exception type */
            Type?: string;
            /** @description Exception message */
            Message?: string;
            /** @description Array of Elements of validation Errors */
            Elements?: components["schemas"]["Element"][];
        };
        Element: {
            /** @description Array of Validation Error message */
            ValidationErrors?: components["schemas"]["ValidationError"][];
            /**
             * Format: uuid
             * @description Unique ID for batch payment object with validation error
             */
            BatchPaymentID?: string;
            /** Format: uuid */
            BankTransactionID?: string;
            /** Format: uuid */
            CreditNoteID?: string;
            /** Format: uuid */
            ContactID?: string;
            /** Format: uuid */
            InvoiceID?: string;
            /** Format: uuid */
            ItemID?: string;
            /** Format: uuid */
            PurchaseOrderID?: string;
        };
        ValidationError: {
            /** @description Validation error message */
            Message?: string;
        };
    };
    responses: {
        /** @description A failed request due to validation error */
        "400Error": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Success - return response of type HistoryRecords array of HistoryRecord objects */
        HistoryRecordCreated: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["HistoryRecords"];
            };
        };
        /** @description Success - return response of HistoryRecords array of 0 to N HistoryRecord */
        HistoryRetrieved: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["HistoryRecords"];
            };
        };
    };
    parameters: {
        /**
         * @description Xero identifier for Tenant
         * @example YOUR_XERO_TENANT_ID
         */
        requiredHeader: string;
        /**
         * @description If false return 200 OK and mix of successfully created objects and any with validation errors
         * @example true
         */
        summarizeErrors: boolean;
        /**
         * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
         * @example 4
         */
        unitdp: number;
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        ifModifiedSince: string;
        /**
         * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
         * @example KEY_VALUE
         */
        idempotencyKey: string;
        /**
         * @description Allows an attachment to be seen by the end customer within their online invoice
         * @example true
         */
        includeOnline: boolean;
        /**
         * @description Use summaryOnly=true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient.
         * @example true
         */
        summaryOnly: boolean;
        /**
         * @description filter by the from date of the report e.g. 2021-02-01
         * @example 2019-10-31
         */
        FromDate: string;
        /**
         * @description filter by the to date of the report e.g. 2021-02-28
         * @example 2019-10-31
         */
        ToDate: string;
        /**
         * @description Unique identifier for Account object
         * @example 00000000-0000-0000-0000-000000000000
         */
        AccountID: string;
        /**
         * @description Unique identifier for Allocation object
         * @example 00000000-0000-0000-0000-000000000000
         */
        AllocationID: string;
        /**
         * @description Unique identifier for Attachment object
         * @example 00000000-0000-0000-0000-000000000000
         */
        AttachmentID: string;
        /**
         * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
         * @example image/jpg
         */
        ContentType: string;
        /**
         * @description Name of the attachment
         * @example xero-dev.jpg
         */
        FileName: string;
        /**
         * @description Unique identifier for BatchPayment
         * @example 00000000-0000-0000-0000-000000000000
         */
        BatchPaymentID: string;
        /**
         * @description Xero generated unique identifier for a bank transaction
         * @example 00000000-0000-0000-0000-000000000000
         */
        BankTransactionID: string;
        /**
         * @description Xero generated unique identifier for a bank transfer
         * @example 00000000-0000-0000-0000-000000000000
         */
        BankTransferID: string;
        /**
         * @description Unique identifier for a Branding Theme
         * @example 00000000-0000-0000-0000-000000000000
         */
        BrandingThemeID: string;
        /**
         * @description Unique identifier for Budgets
         * @example 00000000-0000-0000-0000-000000000000
         */
        BudgetID: string;
        /**
         * @description Unique identifier for a Contact
         * @example 00000000-0000-0000-0000-000000000000
         */
        ContactID: string;
        /**
         * @description Unique identifier for a Contact Group
         * @example 00000000-0000-0000-0000-000000000000
         */
        ContactGroupID: string;
        /**
         * @description Unique identifier for a Credit Note
         * @example 00000000-0000-0000-0000-000000000000
         */
        CreditNoteID: string;
        /**
         * @description Unique identifier for a Employee
         * @example 00000000-0000-0000-0000-000000000000
         */
        EmployeeID: string;
        /**
         * @description Unique identifier for a ExpenseClaim
         * @example 00000000-0000-0000-0000-000000000000
         */
        ExpenseClaimID: string;
        /**
         * @description Unique identifier for an Invoice
         * @example 00000000-0000-0000-0000-000000000000
         */
        InvoiceID: string;
        /**
         * @description Unique identifier for an Item
         * @example 00000000-0000-0000-0000-000000000000
         */
        ItemID: string;
        /**
         * @description Unique identifier for a Journal
         * @example 00000000-0000-0000-0000-000000000000
         */
        JournalID: string;
        /**
         * @description Number of a Journal
         * @example 1000
         */
        JournalNumber: number;
        /**
         * @description Unique identifier for a LinkedTransaction
         * @example 00000000-0000-0000-0000-000000000000
         */
        LinkedTransactionID: string;
        /**
         * @description Unique identifier for a ManualJournal
         * @example 00000000-0000-0000-0000-000000000000
         */
        ManualJournalID: string;
        /**
         * @description The unique Xero identifier for an organisation
         * @example 00000000-0000-0000-0000-000000000000
         */
        OrganisationID: string;
        /**
         * @description Unique identifier for a Overpayment
         * @example 00000000-0000-0000-0000-000000000000
         */
        OverpaymentID: string;
        /**
         * @description Unique identifier for a Payment
         * @example 00000000-0000-0000-0000-000000000000
         */
        PaymentID: string;
        /**
         * @description Unique identifier for a PrePayment
         * @example 00000000-0000-0000-0000-000000000000
         */
        PrepaymentID: string;
        /**
         * @description Unique identifier for an Purchase Order
         * @example 00000000-0000-0000-0000-000000000000
         */
        PurchaseOrderID: string;
        /**
         * @description Unique identifier for an Quote
         * @example 00000000-0000-0000-0000-000000000000
         */
        QuoteID: string;
        /**
         * @description Unique identifier for a Receipt
         * @example 00000000-0000-0000-0000-000000000000
         */
        ReceiptID: string;
        /**
         * @description Unique identifier for a Repeating Invoice
         * @example 00000000-0000-0000-0000-000000000000
         */
        RepeatingInvoiceID: string;
        /**
         * @description Unique identifier for a TrackingCategory
         * @example 00000000-0000-0000-0000-000000000000
         */
        TrackingCategoryID: string;
        /**
         * @description Unique identifier for a Tracking Option
         * @example 00000000-0000-0000-0000-000000000000
         */
        TrackingOptionID: string;
        /**
         * @description Unique identifier for a User
         * @example 00000000-0000-0000-0000-000000000000
         */
        UserID: string;
        /**
         * @description A valid TaxType code
         * @example INPUT2
         */
        TaxType: string;
    };
    requestBodies: {
        /** @description HistoryRecords containing an array of HistoryRecord objects in body of request */
        historyRecords: {
            content: {
                /** @example {   "HistoryRecords": [   {   "Details": "Hello World" } ] } */
                "application/json": components["schemas"]["HistoryRecords"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAccounts: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status==&quot;ACTIVE&quot; AND Type==&quot;BANK&quot;
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Name ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Accounts array with 0 to n Account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Accounts"];
                };
            };
        };
    };
    createAccount: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Account object in body of request */
        requestBody: {
            content: {
                /** @example { "Code":"123456", "Name":"Foobar", "Type":"EXPENSE", "Description":"Hello World" } */
                "application/json": components["schemas"]["Account"];
            };
        };
        responses: {
            /** @description Success - created new Account and return response of type Accounts array with new Account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Accounts"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getAccount: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for Account object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AccountID: components["parameters"]["AccountID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Accounts array with one Account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Accounts"];
                };
            };
        };
    };
    updateAccount: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for Account object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AccountID: components["parameters"]["AccountID"];
            };
            cookie?: never;
        };
        /** @description Request of type Accounts array with one Account */
        requestBody: {
            content: {
                /** @example {   "Accounts":[   {   "Code":"123456", "Name":"BarFoo", "AccountID":"99ce6032-0678-4aa0-8148-240c75fee33a", "Type":"EXPENSE", "Description":"GoodBye World", "TaxType":"INPUT", "EnablePaymentsToAccount":false, "ShowInExpenseClaims":false, "Class":"EXPENSE", "ReportingCode":"EXP", "ReportingCodeName":"Expense", "UpdatedDateUTC":"2019-02-21T16:29:47.96-08:00" } ] } */
                "application/json": components["schemas"]["Accounts"];
            };
        };
        responses: {
            /** @description Success - update existing Account and return response of type Accounts array with updated Account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Accounts"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteAccount: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for Account object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AccountID: components["parameters"]["AccountID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - delete existing Account and return response of type Accounts array with deleted Account */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Accounts"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getAccountAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for Account object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AccountID: components["parameters"]["AccountID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getAccountAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for Account object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AccountID: components["parameters"]["AccountID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Account as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getAccountAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for Account object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AccountID: components["parameters"]["AccountID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Account as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createAccountAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for Account object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AccountID: components["parameters"]["AccountID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateAccountAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for Account object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AccountID: components["parameters"]["AccountID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getBatchPayments: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="AUTHORISED"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Date ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type BatchPayments array of BatchPayment objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchPayments"];
                };
            };
        };
    };
    createBatchPayment: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description BatchPayments with an array of Payments in body of request */
        requestBody: {
            content: {
                /** @example { "BatchPayments": [ { "Account": { "AccountID": "00000000-0000-0000-0000-000000000000" }, "Reference": "ref", "Date": "2018-08-01", "Payments": [ { "Account": { "Code": "001" }, "Date": "2019-12-31", "Amount": 500, "Invoice": { "InvoiceID": "00000000-0000-0000-0000-000000000000", "LineItems": [], "Contact": {}, "Type": "ACCPAY" } } ] } ] } */
                "application/json": components["schemas"]["BatchPayments"];
            };
        };
        responses: {
            /** @description Success - return response of type BatchPayments array of BatchPayment objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchPayments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    deleteBatchPayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {   "BatchPaymentID": "9bf296e9-0748-4d29-a3dc-24dde1098030", "Status":"DELETED" } */
                "application/json": components["schemas"]["BatchPaymentDelete"];
            };
        };
        responses: {
            /** @description Success - return response of type BatchPayments array for updated BatchPayment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchPayments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBatchPayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for BatchPayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BatchPaymentID: components["parameters"]["BatchPaymentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type BatchPayments array with matching batch payment Id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchPayments"];
                };
            };
        };
    };
    deleteBatchPaymentByUrlParam: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for BatchPayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BatchPaymentID: components["parameters"]["BatchPaymentID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {   "Status":"DELETED" } */
                "application/json": components["schemas"]["BatchPaymentDeleteByUrlParam"];
            };
        };
        responses: {
            /** @description Success - return response of type BatchPayments array for updated BatchPayment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BatchPayments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBatchPaymentHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for BatchPayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BatchPaymentID: components["parameters"]["BatchPaymentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of HistoryRecords array of 0 to N HistoryRecord */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryRecords"];
                };
            };
        };
    };
    createBatchPaymentHistoryRecord: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for BatchPayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BatchPaymentID: components["parameters"]["BatchPaymentID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            /** @description Success - return response of type HistoryRecords array of HistoryRecord objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryRecords"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBankTransactions: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="AUTHORISED"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Type ASC
                 */
                order?: string;
                /**
                 * @description Up to 100 bank transactions will be returned in a single API call with line items details
                 * @example 1
                 */
                page?: number;
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type BankTransactions array with 0 to n BankTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankTransactions"];
                };
            };
        };
    };
    createBankTransactions: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description BankTransactions with an array of BankTransaction objects in body of request */
        requestBody: {
            content: {
                /** @example { bankTransactions: [{ type: BankTransaction.TypeEnum.SPEND, contact: { contactID: "00000000-0000-0000-0000-000000000000" }, lineItems: [{ description: "Foobar", quantity: 1.0, unitAmount: 20.0, accountCode: "000" } ], bankAccount: { code: "000" }}]} */
                "application/json": components["schemas"]["BankTransactions"];
            };
        };
        responses: {
            /** @description Success - return response of type BankTransactions array with new BankTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankTransactions"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreateBankTransactions: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "BankTransactions": [ { "Type": "SPEND", "Contact": { "ContactID": "00000000-0000-0000-0000-000000000000" }, "Lineitems": [ { "Description": "Foobar", "Quantity": 1, "UnitAmount": 20, "AccountCode": "400" } ], "BankAccount": { "Code": "088" } } ] } */
                "application/json": components["schemas"]["BankTransactions"];
            };
        };
        responses: {
            /** @description Success - return response of type BankTransactions array with new BankTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankTransactions"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBankTransaction: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type BankTransactions array with a specific BankTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankTransactions"];
                };
            };
        };
    };
    updateBankTransaction: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "BankTransactions": [ { "Type": "SPEND", "Contact": { "ContactID": "00000000-0000-0000-0000-000000000000", "ContactStatus": "ACTIVE", "Name": "Buzz Lightyear", "FirstName": "Buzz", "LastName": "Lightyear", "EmailAddress": "buzz.Lightyear@email.com", "ContactPersons": [], "BankAccountDetails": "", "Addresses": [ { "AddressType": "STREET", "City": "", "Region": "", "PostalCode": "", "Country": "" }, { "AddressType": "POBOX", "AddressLine1": "", "AddressLine2": "", "AddressLine3": "", "AddressLine4": "", "City": "Palo Alto", "Region": "CA", "PostalCode": "94020", "Country": "United States" } ], "Phones": [ { "PhoneType": "DEFAULT", "PhoneNumber": "847-1294", "PhoneAreaCode": "(626)", "PhoneCountryCode": "" }, { "PhoneType": "DDI", "PhoneNumber": "", "PhoneAreaCode": "", "PhoneCountryCode": "" }, { "PhoneType": "FAX", "PhoneNumber": "", "PhoneAreaCode": "", "PhoneCountryCode": "" }, { "PhoneType": "MOBILE", "PhoneNumber": "", "PhoneAreaCode": "", "PhoneCountryCode": "" } ], "UpdatedDateUTC": "2017-08-21T13:49:04.227-07:00", "ContactGroups": [] }, "Lineitems": [], "BankAccount": { "Code": "088", "Name": "Business Wells Fargo", "AccountID": "00000000-0000-0000-0000-000000000000" }, "IsReconciled": false, "Date": "2019-02-25", "Reference": "You just updated", "CurrencyCode": "USD", "CurrencyRate": 1, "Status": "AUTHORISED", "LineAmountTypes": "Inclusive", "TotalTax": 1.74, "BankTransactionID": "00000000-0000-0000-0000-000000000000", "UpdatedDateUTC": "2019-02-26T12:39:27.813-08:00" } ] } */
                "application/json": components["schemas"]["BankTransactions"];
            };
        };
        responses: {
            /** @description Success - return response of type BankTransactions array with updated BankTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankTransactions"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBankTransactionAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array with 0 to n Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getBankTransactionAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for BankTransaction as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getBankTransactionAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for BankTransaction as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createBankTransactionAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateBankTransactionAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBankTransactionsHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createBankTransactionHistoryRecord: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransactionID: components["parameters"]["BankTransactionID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getBankTransfers: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example HasAttachments==true
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Amount ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of BankTransfers array of 0 to N BankTransfer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankTransfers"];
                };
            };
        };
    };
    createBankTransfer: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description BankTransfers with array of BankTransfer objects in request body */
        requestBody: {
            content: {
                /** @example { "BankTransfers": [ { "FromBankAccount": { "Code": "090", "Name": "My Savings", "AccountID": "00000000-0000-0000-0000-000000000000", "Type": "BANK", "BankAccountNumber": "123455", "Status": "ACTIVE", "BankAccountType": "BANK", "CurrencyCode": "USD", "TaxType": "NONE", "EnablePaymentsToAccount": false, "ShowInExpenseClaims": false, "Class": "ASSET", "ReportingCode": "ASS", "ReportingCodeName": "Assets", "HasAttachments": false, "UpdatedDateUTC": "2016-10-17T13:45:33.993-07:00" }, "ToBankAccount": { "Code": "088", "Name": "Business Wells Fargo", "AccountID": "00000000-0000-0000-0000-000000000000", "Type": "BANK", "BankAccountNumber": "123455", "Status": "ACTIVE", "BankAccountType": "BANK", "CurrencyCode": "USD", "TaxType": "NONE", "EnablePaymentsToAccount": false, "ShowInExpenseClaims": false, "Class": "ASSET", "ReportingCode": "ASS", "ReportingCodeName": "Assets", "HasAttachments": false, "UpdatedDateUTC": "2016-06-03T08:31:14.517-07:00" }, "Amount": "50.00", "FromIsReconciled": true, "ToIsReconciled": true, "Reference": "Sub 098801" } ] } */
                "application/json": components["schemas"]["BankTransfers"];
            };
        };
        responses: {
            /** @description Success - return response of BankTransfers array of one BankTransfer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankTransfers"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBankTransfer: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transfer
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransferID: components["parameters"]["BankTransferID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of BankTransfers array with one BankTransfer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankTransfers"];
                };
            };
        };
    };
    getBankTransferAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transfer
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransferID: components["parameters"]["BankTransferID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getBankTransferAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transfer
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransferID: components["parameters"]["BankTransferID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of binary data from the Attachment to a Bank Transfer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getBankTransferAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transfer
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransferID: components["parameters"]["BankTransferID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of binary data from the Attachment to a Bank Transfer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createBankTransferAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transfer
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransferID: components["parameters"]["BankTransferID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateBankTransferAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transfer
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransferID: components["parameters"]["BankTransferID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of Attachments array of 0 to N Attachment for a Bank Transfer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBankTransferHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transfer
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransferID: components["parameters"]["BankTransferID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createBankTransferHistoryRecord: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Xero generated unique identifier for a bank transfer
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BankTransferID: components["parameters"]["BankTransferID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getBrandingThemes: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type BrandingThemes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrandingThemes"];
                };
            };
        };
    };
    getBrandingTheme: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Branding Theme
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BrandingThemeID: components["parameters"]["BrandingThemeID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type BrandingThemes with one BrandingTheme */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BrandingThemes"];
                };
            };
        };
    };
    getBrandingThemePaymentServices: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Branding Theme
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BrandingThemeID: components["parameters"]["BrandingThemeID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type PaymentServices array with 0 to N PaymentService */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentServices"];
                };
            };
        };
    };
    createBrandingThemePaymentServices: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Branding Theme
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BrandingThemeID: components["parameters"]["BrandingThemeID"];
            };
            cookie?: never;
        };
        /** @description PaymentServices array with PaymentService object in body of request */
        requestBody: {
            content: {
                /** @example { "PaymentServices": [ { "PaymentServiceID": "54b3b4f6-0443-4fba-bcd1-61ec0c35ca55", "PaymentServiceName": "PayUpNow", "PaymentServiceUrl": "https://www.payupnow.com/", "PaymentServiceType": "Custom", "PayNowText": "Time To Pay" } ] } */
                "application/json": components["schemas"]["PaymentServices"];
            };
        };
        responses: {
            /** @description Success - return response of type PaymentServices array with newly created PaymentService */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentServices"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getBudgets: {
        parameters: {
            query?: {
                /**
                 * @description Filter by BudgetID. Allows you to retrieve a specific individual budget.
                 * @example &quot;00000000-0000-0000-0000-000000000000&quot;
                 */
                IDs?: string;
                /**
                 * @description Filter by start date
                 * @example 2019-10-31
                 */
                DateTo?: string;
                /**
                 * @description Filter by end date
                 * @example 2019-10-31
                 */
                DateFrom?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Budgets array with 0 to N Budgets */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Budgets"];
                };
            };
        };
    };
    getBudget: {
        parameters: {
            query?: {
                /**
                 * @description Filter by start date
                 * @example 2019-10-31
                 */
                DateTo?: string;
                /**
                 * @description Filter by end date
                 * @example 2019-10-31
                 */
                DateFrom?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for Budgets
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                BudgetID: components["parameters"]["BudgetID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Invoices array with specified Invoices */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Budgets"];
                };
            };
        };
    };
    getContacts: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example ContactStatus==&quot;ACTIVE&quot;
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Name ASC
                 */
                order?: string;
                /**
                 * @description Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call.
                 * @example &quot;00000000-0000-0000-0000-000000000000&quot;
                 */
                IDs?: string[];
                /**
                 * @description e.g. page=1 - Up to 100 contacts will be returned in a single API call.
                 * @example 1
                 */
                page?: number;
                /**
                 * @description e.g. includeArchived=true - Contacts with a status of ARCHIVED will be included in the response
                 * @example true
                 */
                includeArchived?: boolean;
                /**
                 * @description Use summaryOnly=true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient.
                 * @example true
                 */
                summaryOnly?: components["parameters"]["summaryOnly"];
                /**
                 * @description Search parameter that performs a case-insensitive text search across the Name, FirstName, LastName, ContactNumber and EmailAddress fields.
                 * @example Joe Bloggs
                 */
                searchTerm?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Contacts array with 0 to N Contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contacts"];
                };
            };
        };
    };
    createContacts: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Contacts with an array of Contact objects to create in body of request */
        requestBody: {
            content: {
                /** @example { "Contacts": [ { "ContactID": "3ff6d40c-af9a-40a3-89ce-3c1556a25591", "ContactStatus": "ACTIVE", "Name": "Foo9987", "EmailAddress": "sid32476@blah.com", "BankAccountDetails": "", "Addresses": [ { "AddressType": "STREET", "City": "", "Region": "", "PostalCode": "", "Country": "" }, { "AddressType": "POBOX", "City": "", "Region": "", "PostalCode": "", "Country": "" } ], "Phones": [ { "PhoneType": "DEFAULT", "PhoneNumber": "", "PhoneAreaCode": "", "PhoneCountryCode": "" }, { "PhoneType": "DDI", "PhoneNumber": "", "PhoneAreaCode": "", "PhoneCountryCode": "" }, { "PhoneType": "FAX", "PhoneNumber": "", "PhoneAreaCode": "", "PhoneCountryCode": "" }, { "PhoneType": "MOBILE", "PhoneNumber": "555-1212", "PhoneAreaCode": "415", "PhoneCountryCode": "" } ], "UpdatedDateUTC": "/Date(1551399321043+0000)/", "ContactGroups": [], "IsSupplier": false, "IsCustomer": false, "SalesTrackingCategories": [], "PurchasesTrackingCategories": [], "PaymentTerms": { "Bills": { "Day": 15, "Type": "OFCURRENTMONTH" }, "Sales": { "Day": 10, "Type": "DAYSAFTERBILLMONTH" } }, "ContactPersons": [] } ] } */
                "application/json": components["schemas"]["Contacts"];
            };
        };
        responses: {
            /** @description Success - return response of type Contacts array with newly created Contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contacts"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    updateOrCreateContacts: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Contacts": [ { "Name": "Bruce Banner", "EmailAddress": "hulk@avengers.com", "Phones": [ { "PhoneType": "MOBILE", "PhoneNumber": "555-1212", "PhoneAreaCode": "415" } ], "PaymentTerms": { "Bills": { "Day": 15, "Type": "OFCURRENTMONTH" }, "Sales": { "Day": 10, "Type": "DAYSAFTERBILLMONTH" } } } ] } */
                "application/json": components["schemas"]["Contacts"];
            };
        };
        responses: {
            /** @description Success - return response of type Contacts array with newly created Contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contacts"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getContactByContactNumber: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description This field is read only on the Xero contact screen, used to identify contacts in external systems (max length = 50).
                 * @example SB2
                 */
                ContactNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Contacts array with a unique Contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contacts"];
                };
            };
        };
    };
    getContact: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Contacts array with a unique Contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contacts"];
                };
            };
        };
    };
    updateContact: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
            };
            cookie?: never;
        };
        /** @description an array of Contacts containing single Contact object with properties to update */
        requestBody: {
            content: {
                /** @example { "Contacts": [{ "ContactID": "00000000-0000-0000-0000-000000000000", "Name": "Thanos" }]} */
                "application/json": components["schemas"]["Contacts"];
            };
        };
        responses: {
            /** @description Success - return response of type Contacts array with an updated Contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contacts"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getContactAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array with 0 to N Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getContactAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Contact as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getContactAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Contact as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createContactAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with an newly created Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateContactAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with an updated Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getContactCISSettings: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type CISSettings for a specific Contact */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CISSettings"];
                };
            };
        };
    };
    getContactHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createContactHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getContactGroups: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="ACTIVE"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Name ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Contact Groups array of Contact Group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactGroups"];
                };
            };
        };
    };
    createContactGroup: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description ContactGroups with an array of names in request body */
        requestBody: {
            content: {
                /** @example { "ContactGroups": [{ "Name": "VIPs" }]} */
                "application/json": components["schemas"]["ContactGroups"];
            };
        };
        responses: {
            /** @description Success - return response of type Contact Groups array of newly created Contact Group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactGroups"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getContactGroup: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact Group
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactGroupID: components["parameters"]["ContactGroupID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Contact Groups array with a specific Contact Group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactGroups"];
                };
            };
        };
    };
    updateContactGroup: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact Group
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactGroupID: components["parameters"]["ContactGroupID"];
            };
            cookie?: never;
        };
        /** @description an array of Contact groups with Name of specific group to update */
        requestBody: {
            content: {
                /** @example {   "ContactGroups":[   {   "Name":"Suppliers" } ] } */
                "application/json": components["schemas"]["ContactGroups"];
            };
        };
        responses: {
            /** @description Success - return response of type Contact Groups array of updated Contact Group */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactGroups"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    createContactGroupContacts: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact Group
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactGroupID: components["parameters"]["ContactGroupID"];
            };
            cookie?: never;
        };
        /** @description Contacts with array of contacts specifying the ContactID to be added to ContactGroup in body of request */
        requestBody: {
            content: {
                /** @example { "Contacts": [ { "ContactID": "a3675fc4-f8dd-4f03-ba5b-f1870566bcd7" }, { "ContactID": "4e1753b9-018a-4775-b6aa-1bc7871cfee3" } ] } */
                "application/json": components["schemas"]["Contacts"];
            };
        };
        responses: {
            /** @description Success - return response of type Contacts array of added Contacts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contacts"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    deleteContactGroupContacts: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact Group
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactGroupID: components["parameters"]["ContactGroupID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response 204 no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteContactGroupContact: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Contact Group
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactGroupID: components["parameters"]["ContactGroupID"];
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID: components["parameters"]["ContactID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response 204 no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400Error"];
        };
    };
    getCreditNotes: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="DRAFT"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example CreditNoteNumber ASC
                 */
                order?: string;
                /**
                 * @description e.g. page=1 – Up to 100 credit notes will be returned in a single API call with line items shown for each credit note
                 * @example 1
                 */
                page?: number;
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Credit Notes array of CreditNote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNotes"];
                };
            };
        };
    };
    createCreditNotes: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Credit Notes with array of CreditNote object in body of request */
        requestBody: {
            content: {
                /** @example {   "CreditNotes":[   {   "Type":"ACCPAYCREDIT", "Contact":{   "ContactID":"430fa14a-f945-44d3-9f97-5df5e28441b8" }, "Date":"2019-01-05", "LineItems":[   {   "Description":"Foobar", "Quantity":2.0, "UnitAmount":20.0, "AccountCode":"400" } ] } ] } */
                "application/json": components["schemas"]["CreditNotes"];
            };
        };
        responses: {
            /** @description Success - return response of type Credit Notes array of newly created CreditNote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNotes"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreateCreditNotes: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description an array of Credit Notes with a single CreditNote object. */
        requestBody: {
            content: {
                /** @example {   "CreditNotes":[   {   "Type":"ACCPAYCREDIT", "Contact":{   "ContactID":"430fa14a-f945-44d3-9f97-5df5e28441b8" }, "Date":"2019-01-05", "Status":"AUTHORISED", "Reference": "HelloWorld", "LineItems":[   {   "Description":"Foobar", "Quantity":2.0, "UnitAmount":20.0, "AccountCode":"400" } ] } ] } */
                "application/json": components["schemas"]["CreditNotes"];
            };
        };
        responses: {
            /** @description Success - return response of type Credit Notes array of newly created CreditNote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNotes"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getCreditNote: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Credit Notes array with a unique CreditNote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNotes"];
                };
            };
        };
    };
    updateCreditNote: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
            };
            cookie?: never;
        };
        /** @description an array of Credit Notes containing credit note details to update */
        requestBody: {
            content: {
                /** @example { "CreditNotes": [ { "Type": "ACCPAYCREDIT", "Contact": { "ContactID": "430fa14a-f945-44d3-9f97-5df5e28441b8" }, "Date": "2019-01-05", "Status": "AUTHORISED", "Reference": "HelloWorld", "LineItems": [ { "Description": "Foobar", "Quantity": 2, "UnitAmount": 20, "AccountCode": "400" } ] } ] } */
                "application/json": components["schemas"]["CreditNotes"];
            };
        };
        responses: {
            /** @description Success - return response of type Credit Notes array with updated CreditNote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditNotes"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getCreditNoteAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array with all Attachment for specific Credit Note */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getCreditNoteAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Credit Note as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getCreditNoteAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Credit Note as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createCreditNoteAttachmentByFileName: {
        parameters: {
            query?: {
                /**
                 * @description Allows an attachment to be seen by the end customer within their online invoice
                 * @example true
                 */
                IncludeOnline?: components["parameters"]["includeOnline"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with newly created Attachment for specific Credit Note */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateCreditNoteAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with updated Attachment for specific Credit Note */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getCreditNoteAsPdf: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of binary data from the Attachment to a Credit Note */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                };
            };
        };
    };
    createCreditNoteAllocation: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
            };
            cookie?: never;
        };
        /** @description Allocations with array of Allocation object in body of request. */
        requestBody: {
            content: {
                /** @example { "Allocations": [ { "Invoice": { "LineItems": [], "InvoiceID": "c45720a1-ade3-4a38-a064-d15489be6841" }, "Amount": 1, "Date": "2019-03-05" } ] } */
                "application/json": components["schemas"]["Allocations"];
            };
        };
        responses: {
            /** @description Success - return response of type Allocations array with newly created Allocation for specific Credit Note */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allocations"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    deleteCreditNoteAllocations: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
                /**
                 * @description Unique identifier for Allocation object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AllocationID: components["parameters"]["AllocationID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Allocation with the isDeleted flag as true */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allocation"];
                };
            };
        };
    };
    getCreditNoteHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createCreditNoteHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Credit Note
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                CreditNoteID: components["parameters"]["CreditNoteID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getCurrencies: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Code=="USD"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Code ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Currencies array with all Currencies */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Currencies"];
                };
            };
        };
    };
    createCurrency: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Currency object in the body of request */
        requestBody: {
            content: {
                /** @example { "Code": "USD", "Description": "United States Dollar" } */
                "application/json": components["schemas"]["Currency"];
            };
        };
        responses: {
            /** @description Unsupported - return response incorrect exception, API is not able to create new Currency */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Currencies"];
                };
            };
        };
    };
    getEmployees: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="ACTIVE"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example LastName ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Employees array with all Employee */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employees"];
                };
            };
        };
    };
    createEmployees: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Employees with array of Employee object in body of request */
        requestBody: {
            content: {
                /** @example { "Employees": [ { "FirstName": "Nick", "LastName": "Fury", "ExternalLink": { "Url": "http://twitter.com/#!/search/Nick+Fury" } } ] } */
                "application/json": components["schemas"]["Employees"];
            };
        };
        responses: {
            /** @description Success - return response of type Employees array with new Employee */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employees"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreateEmployees: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Employees with array of Employee object in body of request */
        requestBody: {
            content: {
                /** @example { "Employees": [ { "FirstName": "Nick", "LastName": "Fury", "ExternalLink": { "Url": "http://twitter.com/#!/search/Nick+Fury" } } ] } */
                "application/json": components["schemas"]["Employees"];
            };
        };
        responses: {
            /** @description Success - return response of type Employees array with new Employee */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employees"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getEmployee: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Employee
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                EmployeeID: components["parameters"]["EmployeeID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Employees array with specified Employee */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Employees"];
                };
            };
        };
    };
    getExpenseClaims: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="SUBMITTED"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Status ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ExpenseClaims array with all ExpenseClaims */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseClaims"];
                };
            };
        };
    };
    createExpenseClaims: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description ExpenseClaims with array of ExpenseClaim object in body of request */
        requestBody: {
            content: {
                /** @example { "ExpenseClaims": [ { "Status": "SUBMITTED", "User": { "UserID": "d1164823-0ac1-41ad-987b-b4e30fe0b273" }, "Receipts": [ { "Lineitems": [], "ReceiptID": "dc1c7f6d-0a4c-402f-acac-551d62ce5816" } ] } ] } */
                "application/json": components["schemas"]["ExpenseClaims"];
            };
        };
        responses: {
            /** @description Success - return response of type ExpenseClaims array with newly created ExpenseClaim */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseClaims"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getExpenseClaim: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a ExpenseClaim
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ExpenseClaimID: components["parameters"]["ExpenseClaimID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ExpenseClaims array with specified ExpenseClaim */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseClaims"];
                };
            };
        };
    };
    updateExpenseClaim: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a ExpenseClaim
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ExpenseClaimID: components["parameters"]["ExpenseClaimID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "ExpenseClaims": [ { "Status": "SUBMITTED", "User": { "UserID": "d1164823-0ac1-41ad-987b-b4e30fe0b273" }, "Receipts": [ { "Lineitems": [], "ReceiptID": "dc1c7f6d-0a4c-402f-acac-551d62ce5816" } ] } ] } */
                "application/json": components["schemas"]["ExpenseClaims"];
            };
        };
        responses: {
            /** @description Success - return response of type ExpenseClaims array with updated ExpenseClaim */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ExpenseClaims"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getExpenseClaimHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a ExpenseClaim
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ExpenseClaimID: components["parameters"]["ExpenseClaimID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createExpenseClaimHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a ExpenseClaim
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ExpenseClaimID: components["parameters"]["ExpenseClaimID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
        };
    };
    getInvoices: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="DRAFT"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example InvoiceNumber ASC
                 */
                order?: string;
                /**
                 * @description Filter by a comma-separated list of InvoicesIDs.
                 * @example &quot;00000000-0000-0000-0000-000000000000&quot;
                 */
                IDs?: string[];
                /**
                 * @description Filter by a comma-separated list of InvoiceNumbers.
                 * @example &quot;INV-001&quot;, &quot;INV-002&quot;
                 */
                InvoiceNumbers?: string[];
                /**
                 * @description Filter by a comma-separated list of ContactIDs.
                 * @example &quot;00000000-0000-0000-0000-000000000000&quot;
                 */
                ContactIDs?: string[];
                /**
                 * @description Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter.
                 * @example &quot;DRAFT&quot;, &quot;SUBMITTED&quot;
                 */
                Statuses?: string[];
                /**
                 * @description e.g. page=1 – Up to 100 invoices will be returned in a single API call with line items shown for each invoice
                 * @example 1
                 */
                page?: number;
                /**
                 * @description e.g. includeArchived=true - Invoices with a status of ARCHIVED will be included in the response
                 * @example true
                 */
                includeArchived?: boolean;
                /**
                 * @description When set to true you'll only retrieve Invoices created by your app
                 * @example false
                 */
                createdByMyApp?: boolean;
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
                /**
                 * @description Use summaryOnly=true in GET Contacts and Invoices endpoint to retrieve a smaller version of the response object. This returns only lightweight fields, excluding computation-heavy fields from the response, making the API calls quick and efficient.
                 * @example true
                 */
                summaryOnly?: components["parameters"]["summaryOnly"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Invoices array with all Invoices */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoices"];
                };
            };
        };
    };
    createInvoices: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Invoices with an array of invoice objects in body of request */
        requestBody: {
            content: {
                /** @example { "Invoices": [ { "Type": "ACCREC", "Contact": { "ContactID": "430fa14a-f945-44d3-9f97-5df5e28441b8" }, "LineItems": [ { "Description": "Acme Tires", "Quantity": 2, "UnitAmount": 20, "AccountCode": "200", "TaxType": "NONE", "LineAmount": 40 } ], "Date": "2019-03-11", "DueDate": "2018-12-10", "Reference": "Website Design", "Status": "AUTHORISED" } ] } */
                "application/json": components["schemas"]["Invoices"];
            };
        };
        responses: {
            /** @description Success - return response of type Invoices array with newly created Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoices"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreateInvoices: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Invoices": [ { "Type": "ACCREC", "Contact": { "ContactID": "430fa14a-f945-44d3-9f97-5df5e28441b8" }, "LineItems": [ { "Description": "Acme Tires", "Quantity": 2, "UnitAmount": 20, "AccountCode": "200", "TaxType": "NONE", "LineAmount": 40 } ], "Date": "2019-03-11", "DueDate": "2018-12-10", "Reference": "Website Design", "Status": "AUTHORISED" } ] } */
                "application/json": components["schemas"]["Invoices"];
            };
        };
        responses: {
            /** @description Success - return response of type Invoices array with newly created Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoices"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getInvoice: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Invoices array with specified Invoices */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoices"];
                };
            };
        };
    };
    updateInvoice: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Invoices": [{ Reference: "May the force be with you", "InvoiceID": "00000000-0000-0000-0000-000000000000", "LineItems": [], "Contact": {}, "Type": "ACCPAY" }]} */
                "application/json": components["schemas"]["Invoices"];
            };
        };
        responses: {
            /** @description Success - return response of type Invoices array with updated Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Invoices"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getInvoiceAsPdf: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of byte array pdf version of specified Invoices */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                };
            };
        };
    };
    getInvoiceAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array of Attachments for specified Invoices */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getInvoiceAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Invoice as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getInvoiceAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Invoice as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createInvoiceAttachmentByFileName: {
        parameters: {
            query?: {
                /**
                 * @description Allows an attachment to be seen by the end customer within their online invoice
                 * @example true
                 */
                IncludeOnline?: components["parameters"]["includeOnline"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with newly created Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateInvoiceAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with updated Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getOnlineInvoice: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type OnlineInvoice array with one OnlineInvoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlineInvoices"];
                };
            };
        };
    };
    emailInvoice: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {} */
                "application/json": components["schemas"]["RequestEmpty"];
            };
        };
        responses: {
            /** @description Success - return response 204 no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400Error"];
        };
    };
    getInvoiceHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createInvoiceHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                InvoiceID: components["parameters"]["InvoiceID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getInvoiceReminders: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of Invoice Reminders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceReminders"];
                };
            };
        };
    };
    getItems: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example IsSold==true
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Code ASC
                 */
                order?: string;
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Items array with all Item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
        };
    };
    createItems: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Items with an array of Item objects in body of request */
        requestBody: {
            content: {
                /** @example { "Items": [ { "Code": "code123", "Name": "Item Name XYZ", "Description": "Foobar", "InventoryAssetAccountCode": "140", "PurchaseDetails": { "COGSAccountCode": "500" } } ] } */
                "application/json": components["schemas"]["Items"];
            };
        };
        responses: {
            /** @description Success - return response of type Items array with newly created Item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreateItems: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Items": [ { "Code": "ItemCode123", "Name": "ItemName XYZ", "Description": "Item Description ABC" } ] } */
                "application/json": components["schemas"]["Items"];
            };
        };
        responses: {
            /** @description Success - return response of type Items array with newly created Item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getItem: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Item
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ItemID: components["parameters"]["ItemID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Items array with specified Item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
        };
    };
    updateItem: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Item
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ItemID: components["parameters"]["ItemID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Items": [ { "Code": "ItemCode123", "Description": "Description 123" } ] } */
                "application/json": components["schemas"]["Items"];
            };
        };
        responses: {
            /** @description Success - return response of type Items array with updated Item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    deleteItem: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Item
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ItemID: components["parameters"]["ItemID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response 204 no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400Error"];
        };
    };
    getItemHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Item
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ItemID: components["parameters"]["ItemID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createItemHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Item
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ItemID: components["parameters"]["ItemID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
        };
    };
    getJournals: {
        parameters: {
            query?: {
                /**
                 * @description Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned
                 * @example 10
                 */
                offset?: number;
                /**
                 * @description Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default.
                 * @example true
                 */
                paymentsOnly?: boolean;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Journals array with all Journals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Journals"];
                };
            };
        };
    };
    getJournal: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Journal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                JournalID: components["parameters"]["JournalID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Journals array with specified Journal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Journals"];
                };
            };
        };
    };
    getJournalByNumber: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Number of a Journal
                 * @example 1000
                 */
                JournalNumber: components["parameters"]["JournalNumber"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Journals array with specified Journal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Journals"];
                };
            };
        };
    };
    getLinkedTransactions: {
        parameters: {
            query?: {
                /**
                 * @description Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page=1.
                 * @example 1
                 */
                page?: number;
                /**
                 * @description The Xero identifier for an Linked Transaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                LinkedTransactionID?: string;
                /**
                 * @description Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                SourceTransactionID?: string;
                /**
                 * @description Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer.
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID?: string;
                /**
                 * @description Filter by the combination of ContactID and Status. Get  the linked transactions associated to a  customer and with a status
                 * @example APPROVED
                 */
                Status?: string;
                /**
                 * @description Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TargetTransactionID?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type LinkedTransactions array with all LinkedTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkedTransactions"];
                };
            };
        };
    };
    createLinkedTransaction: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description LinkedTransaction object in body of request */
        requestBody: {
            content: {
                /** @example { "LinkedTransactions": [ { "SourceTransactionID": "a848644a-f20f-4630-98c3-386bd7505631", "SourceLineItemID": "b0df260d-3cc8-4ced-9bd6-41924f624ed3" } ] } */
                "application/json": components["schemas"]["LinkedTransaction"];
            };
        };
        responses: {
            /** @description Success - return response of type LinkedTransactions array with newly created LinkedTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkedTransactions"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getLinkedTransaction: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a LinkedTransaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                LinkedTransactionID: components["parameters"]["LinkedTransactionID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type LinkedTransactions array with a specified LinkedTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkedTransactions"];
                };
            };
        };
    };
    updateLinkedTransaction: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a LinkedTransaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                LinkedTransactionID: components["parameters"]["LinkedTransactionID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "LinkedTransactions": [ { "SourceTransactionID": "00000000-0000-0000-0000-000000000000", "SourceLineItemID": "00000000-0000-0000-0000-000000000000" } ] } */
                "application/json": components["schemas"]["LinkedTransactions"];
            };
        };
        responses: {
            /** @description Success - return response of type LinkedTransactions array with updated LinkedTransaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkedTransactions"];
                };
            };
            /** @description Success - return response of type LinkedTransactions array with updated LinkedTransaction */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteLinkedTransaction: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a LinkedTransaction
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                LinkedTransactionID: components["parameters"]["LinkedTransactionID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response 204 no content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400Error"];
        };
    };
    getManualJournals: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="DRAFT"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Date ASC
                 */
                order?: string;
                /**
                 * @description e.g. page=1 – Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment
                 * @example 1
                 */
                page?: number;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ManualJournals array with a all ManualJournals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ManualJournals"];
                };
            };
        };
    };
    createManualJournals: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description ManualJournals array with ManualJournal object in body of request */
        requestBody: {
            content: {
                /** @example { "ManualJournals": [ { "Narration": "Journal Desc", "JournalLines": [ { "LineAmount": 100, "AccountCode": "400", "Description": "Money Movement" }, { "LineAmount": -100, "AccountCode": "400", "Description": "Prepayment of things", "Tracking": [ { "Name": "North", "Option": "Region" } ] } ], "Date": "2019-03-14" } ] } */
                "application/json": components["schemas"]["ManualJournals"];
            };
        };
        responses: {
            /** @description Success - return response of type ManualJournals array with newly created ManualJournal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ManualJournals"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreateManualJournals: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description ManualJournals array with ManualJournal object in body of request */
        requestBody: {
            content: {
                /** @example { "ManualJournals": [ { "Narration": "Journal Desc", "JournalLines": [ { "LineAmount": 100, "AccountCode": "400", "Description": "Money Movement" }, { "LineAmount": -100, "AccountCode": "400", "Description": "Prepayment of things", "Tracking": [ { "Name": "North", "Option": "Region" } ] } ], "Date": "2019-03-14" } ] } */
                "application/json": components["schemas"]["ManualJournals"];
            };
        };
        responses: {
            /** @description Success - return response of type ManualJournals array with newly created ManualJournal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ManualJournals"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getManualJournal: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ManualJournals array with a specified ManualJournals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ManualJournals"];
                };
            };
        };
    };
    updateManualJournal: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "ManualJournals": [ { "Narration": "Hello Xero", "ManualJournalID": "00000000-0000-0000-0000-000000000000", "JournalLines": [] } ] } */
                "application/json": components["schemas"]["ManualJournals"];
            };
        };
        responses: {
            /** @description Success - return response of type ManualJournals array with an updated ManualJournal */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ManualJournals"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getManualJournalAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array with all Attachments for a ManualJournals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getManualJournalAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Manual Journal as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getManualJournalAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Manual Journal as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createManualJournalAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with a newly created Attachment for a ManualJournals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateManualJournalAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with an update Attachment for a ManualJournals */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getManualJournalsHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createManualJournalHistoryRecord: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a ManualJournal
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ManualJournalID: components["parameters"]["ManualJournalID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getOrganisations: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Organisation array with all Organisation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organisations"];
                };
            };
        };
    };
    getOrganisationActions: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Actions array with all key actions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Actions"];
                };
            };
        };
    };
    getOrganisationCISSettings: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description The unique Xero identifier for an organisation
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                OrganisationID: components["parameters"]["OrganisationID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Organisation array with specified Organisation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CISOrgSettings"];
                };
            };
        };
    };
    getOverpayments: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="AUTHORISED"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Status ASC
                 */
                order?: string;
                /**
                 * @description e.g. page=1 – Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment
                 * @example 1
                 */
                page?: number;
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Overpayments array with all Overpayments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Overpayments"];
                };
            };
        };
    };
    getOverpayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Overpayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                OverpaymentID: components["parameters"]["OverpaymentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Overpayments array with specified Overpayments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Overpayments"];
                };
            };
        };
    };
    createOverpaymentAllocations: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Overpayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                OverpaymentID: components["parameters"]["OverpaymentID"];
            };
            cookie?: never;
        };
        /** @description Allocations array with Allocation object in body of request */
        requestBody: {
            content: {
                /** @example { "Allocations": [ { "Invoice": { "InvoiceID": "00000000-0000-0000-0000-000000000000", "LineItems": [], "Contact": {}, "Type": "ACCPAY" }, "Amount": 10.00, "Date": "2019-03-12" } ] } */
                "application/json": components["schemas"]["Allocations"];
            };
        };
        responses: {
            /** @description Success - return response of type Allocations array with all Allocation for Overpayments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allocations"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    deleteOverpaymentAllocations: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Overpayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                OverpaymentID: components["parameters"]["OverpaymentID"];
                /**
                 * @description Unique identifier for Allocation object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AllocationID: components["parameters"]["AllocationID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Allocation with the isDeleted flag as true */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allocation"];
                };
            };
        };
    };
    getOverpaymentHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Overpayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                OverpaymentID: components["parameters"]["OverpaymentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createOverpaymentHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Overpayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                OverpaymentID: components["parameters"]["OverpaymentID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            /** @description A failed request due to validation error - API is not able to create HistoryRecord for Overpayments */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPayments: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="AUTHORISED"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Amount ASC
                 */
                order?: string;
                /**
                 * @description Up to 100 payments will be returned in a single API call
                 * @example 1
                 */
                page?: number;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Payments array for all Payments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payments"];
                };
            };
        };
    };
    createPayments: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Payments array with Payment object in body of request */
        requestBody: {
            content: {
                /** @example { "Payments": [ { "Invoice": { "LineItems": [], "InvoiceID": "00000000-0000-0000-0000-000000000000" }, "Account": { "Code": "970" }, "Date": "2019-03-12", "Amount": 1 } ] } */
                "application/json": components["schemas"]["Payments"];
            };
        };
        responses: {
            /** @description Success - return response of type Payments array for newly created Payment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    createPayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Request body with a single Payment object */
        requestBody: {
            content: {
                /** @example { "Payments": [ { "Invoice": { "LineItems": [], "InvoiceID": "00000000-0000-0000-0000-000000000000" }, "Account": { "Code": "970" }, "Date": "2019-03-12", "Amount": 1 } ] } */
                "application/json": components["schemas"]["Payment"];
            };
        };
        responses: {
            /** @description Success - return response of type Payments array for newly created Payment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getPayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Payment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PaymentID: components["parameters"]["PaymentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Payments array for specified Payment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payments"];
                };
            };
        };
    };
    deletePayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Payment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PaymentID: components["parameters"]["PaymentID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {   "Payments":[   {   "Status":"DELETED" } ] } */
                "application/json": components["schemas"]["PaymentDelete"];
            };
        };
        responses: {
            /** @description Success - return response of type Payments array for updated Payment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Payments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getPaymentHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Payment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PaymentID: components["parameters"]["PaymentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createPaymentHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Payment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PaymentID: components["parameters"]["PaymentID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            /** @description A failed request due to validation error - API is not able to create HistoryRecord for Payments */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPaymentServices: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type PaymentServices array for all PaymentService */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentServices"];
                };
            };
        };
    };
    createPaymentService: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description PaymentServices array with PaymentService object in body of request */
        requestBody: {
            content: {
                /** @example { "PaymentServices": [ { "PaymentServiceName": "PayUpNow", "PaymentServiceUrl": "https://www.payupnow.com/", "PayNowText": "Time To Pay" } ] } */
                "application/json": components["schemas"]["PaymentServices"];
            };
        };
        responses: {
            /** @description Success - return response of type PaymentServices array for newly created PaymentService */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentServices"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getPrepayments: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="AUTHORISED"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Reference ASC
                 */
                order?: string;
                /**
                 * @description e.g. page=1 – Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment
                 * @example 1
                 */
                page?: number;
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Prepayments array for all Prepayment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prepayments"];
                };
            };
        };
    };
    getPrepayment: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a PrePayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PrepaymentID: components["parameters"]["PrepaymentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Prepayments array for a specified Prepayment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prepayments"];
                };
            };
        };
    };
    createPrepaymentAllocations: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a PrePayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PrepaymentID: components["parameters"]["PrepaymentID"];
            };
            cookie?: never;
        };
        /** @description Allocations with an array of Allocation object in body of request */
        requestBody: {
            content: {
                /** @example { "Allocations": [ { "Invoice": { "LineItems": [], "InvoiceID": "00000000-0000-0000-0000-000000000000" }, "Amount": 1, "Date": "2019-01-10" } ] } */
                "application/json": components["schemas"]["Allocations"];
            };
        };
        responses: {
            /** @description Success - return response of type Allocations array of Allocation for all Prepayment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allocations"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    deletePrepaymentAllocations: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a PrePayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PrepaymentID: components["parameters"]["PrepaymentID"];
                /**
                 * @description Unique identifier for Allocation object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AllocationID: components["parameters"]["AllocationID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Allocation with the isDeleted flag as true */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allocation"];
                };
            };
        };
    };
    getPrepaymentHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a PrePayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PrepaymentID: components["parameters"]["PrepaymentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createPrepaymentHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a PrePayment
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PrepaymentID: components["parameters"]["PrepaymentID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            /** @description Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Expense Claims */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getPurchaseOrders: {
        parameters: {
            query?: {
                /**
                 * @description Filter by purchase order status
                 * @example SUBMITTED
                 */
                Status?: "DRAFT" | "SUBMITTED" | "AUTHORISED" | "BILLED" | "DELETED";
                /**
                 * @description Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31
                 * @example 2019-12-01
                 */
                DateFrom?: string;
                /**
                 * @description Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom=2015-12-01&DateTo=2015-12-31
                 * @example 2019-12-31
                 */
                DateTo?: string;
                /**
                 * @description Order by an any element
                 * @example PurchaseOrderNumber ASC
                 */
                order?: string;
                /**
                 * @description To specify a page, append the page parameter to the URL e.g. ?page=1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page=2 and continuing this process until no more results are returned.
                 * @example 1
                 */
                page?: number;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type PurchaseOrder array of all PurchaseOrder */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrders"];
                };
            };
        };
    };
    createPurchaseOrders: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description PurchaseOrders with an array of PurchaseOrder object in body of request */
        requestBody: {
            content: {
                /** @example { "PurchaseOrders": [ { "Contact": { "ContactID": "00000000-0000-0000-0000-000000000000" }, "LineItems": [ { "Description": "Foobar", "Quantity": 1, "UnitAmount": 20, "AccountCode": "710" } ], "Date": "2019-03-13" } ] } */
                "application/json": components["schemas"]["PurchaseOrders"];
            };
        };
        responses: {
            /** @description Success - return response of type PurchaseOrder array for specified PurchaseOrder */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrders"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreatePurchaseOrders: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "PurchaseOrders": [ { "Contact": { "ContactID": "00000000-0000-0000-0000-000000000000" }, "LineItems": [ { "Description": "Foobar", "Quantity": 1, "UnitAmount": 20, "AccountCode": "710" } ], "Date": "2019-03-13" } ] } */
                "application/json": components["schemas"]["PurchaseOrders"];
            };
        };
        responses: {
            /** @description Success - return response of type PurchaseOrder array for specified PurchaseOrder */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrders"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getPurchaseOrderAsPdf: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of byte array pdf version of specified Purchase Orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                };
            };
        };
    };
    getPurchaseOrder: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type PurchaseOrder array for specified PurchaseOrder */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrders"];
                };
            };
        };
    };
    updatePurchaseOrder: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "PurchaseOrders": [ { "AttentionTo": "Peter Parker", "LineItems": [], "Contact": {} } ] } */
                "application/json": components["schemas"]["PurchaseOrders"];
            };
        };
        responses: {
            /** @description Success - return response of type PurchaseOrder array for updated PurchaseOrder */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrders"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getPurchaseOrderByNumber: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a PurchaseOrder
                 * @example PO1234
                 */
                PurchaseOrderNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type PurchaseOrder array for specified PurchaseOrder */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PurchaseOrders"];
                };
            };
        };
    };
    getPurchaseOrderHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createPurchaseOrderHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getPurchaseOrderAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array of Purchase Orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getPurchaseOrderAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Account as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getPurchaseOrderAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Purchase Order as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createPurchaseOrderAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updatePurchaseOrderAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Purchase Order
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                PurchaseOrderID: components["parameters"]["PurchaseOrderID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getQuotes: {
        parameters: {
            query?: {
                /**
                 * @description Filter for quotes after a particular date
                 * @example 2019-10-31
                 */
                DateFrom?: string;
                /**
                 * @description Filter for quotes before a particular date
                 * @example 2019-10-31
                 */
                DateTo?: string;
                /**
                 * @description Filter for quotes expiring after a particular date
                 * @example 2019-10-31
                 */
                ExpiryDateFrom?: string;
                /**
                 * @description Filter for quotes before a particular date
                 * @example 2019-10-31
                 */
                ExpiryDateTo?: string;
                /**
                 * @description Filter for quotes belonging to a particular contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ContactID?: string;
                /**
                 * @description Filter for quotes of a particular Status
                 * @example DRAFT
                 */
                Status?: string;
                /**
                 * @description e.g. page=1 – Up to 100 Quotes will be returned in a single API call with line items shown for each quote
                 * @example 1
                 */
                page?: number;
                /**
                 * @description Order by an any element
                 * @example Status ASC
                 */
                order?: string;
                /**
                 * @description Filter by quote number (e.g. GET https://.../Quotes?QuoteNumber=QU-0001)
                 * @example QU-0001
                 */
                QuoteNumber?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type quotes array with all quotes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Quotes"];
                };
            };
        };
    };
    createQuotes: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Quotes with an array of Quote object in body of request */
        requestBody: {
            content: {
                /** @example { "Quotes": [ { "Contact": { "ContactID": "00000000-0000-0000-0000-000000000000" }, "LineItems": [ { "Description": "Foobar", "Quantity": 1, "UnitAmount": 20, "AccountCode": "12775" } ], "Date": "2020-02-01" } ] } */
                "application/json": components["schemas"]["Quotes"];
            };
        };
        responses: {
            /** @description Success - return response of type Quotes with array with newly created Quote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Quotes"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreateQuotes: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Quotes": [ { "Contact": { "ContactID": "00000000-0000-0000-0000-000000000000" }, "LineItems": [ { "Description": "Foobar", "Quantity": 1, "UnitAmount": 20, "AccountCode": "12775" } ], "Date": "2020-02-01" } ] } */
                "application/json": components["schemas"]["Quotes"];
            };
        };
        responses: {
            /** @description Success - return response of type Quotes array with updated or created Quote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Quotes"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getQuote: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Quotes array with specified Quote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Quotes"];
                };
            };
        };
    };
    updateQuote: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Quotes": [ { "Reference": "I am an update", "Contact": { "ContactID": "00000000-0000-0000-0000-000000000000" }, "Date": "2020-02-01" } ] } */
                "application/json": components["schemas"]["Quotes"];
            };
        };
        responses: {
            /** @description Success - return response of type Quotes array with updated Quote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Quotes"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getQuoteHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createQuoteHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getQuoteAsPdf: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of byte array pdf version of specified Quotes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                };
            };
        };
    };
    getQuoteAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getQuoteAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Quote as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getQuoteAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Quote as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createQuoteAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateQuoteAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for an Quote
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                QuoteID: components["parameters"]["QuoteID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array of Attachment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            /** @description Validation Error - some data was incorrect returns response of type Error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getReceipts: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="DRAFT"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example ReceiptNumber ASC
                 */
                order?: string;
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Receipts array for all Receipt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Receipts"];
                };
            };
        };
    };
    createReceipt: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Receipts with an array of Receipt object in body of request */
        requestBody: {
            content: {
                /** @example { "Receipts": [ { "Contact": { "ContactID": "00000000-0000-0000-0000-000000000000" }, "Lineitems": [ { "Description": "Foobar", "Quantity": 2, "UnitAmount": 20, "AccountCode": "400", "TaxType": "NONE", "LineAmount": 40 } ], "User": { "UserID": "00000000-0000-0000-0000-000000000000" }, "LineAmountTypes": "NoTax", "Status": "DRAFT" } ] } */
                "application/json": components["schemas"]["Receipts"];
            };
        };
        responses: {
            /** @description Success - return response of type Receipts array for newly created Receipt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Receipts"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getReceipt: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Receipts array for a specified Receipt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Receipts"];
                };
            };
        };
    };
    updateReceipt: {
        parameters: {
            query?: {
                /**
                 * @description e.g. unitdp=4 – (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
                 * @example 4
                 */
                unitdp?: components["parameters"]["unitdp"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Receipts": [ { "Lineitems": [], "User": { "UserID": "00000000-0000-0000-0000-000000000000" }, "Reference": "Foobar" } ] } */
                "application/json": components["schemas"]["Receipts"];
            };
        };
        responses: {
            /** @description Success - return response of type Receipts array for updated Receipt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Receipts"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getReceiptAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array of Attachments for a specified Receipt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getReceiptAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Receipt as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getReceiptAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Receipt as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createReceiptAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with newly created Attachment for a specified Receipt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateReceiptAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with updated Attachment for a specified Receipt */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getReceiptHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createReceiptHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Receipt
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReceiptID: components["parameters"]["ReceiptID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            /** @description Unsupported - return response incorrect exception, API is not able to create HistoryRecord for Receipts */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    getRepeatingInvoices: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="DRAFT"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Total ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Repeating Invoices array for all Repeating Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepeatingInvoices"];
                };
            };
        };
    };
    createRepeatingInvoices: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description RepeatingInvoices with an array of repeating invoice objects in body of request */
        requestBody: {
            content: {
                /** @example { "RepeatingInvoices": [ { "Schedule": { "Period": 1, "Unit": "MONTHLY", "DueDate": 10, "DueDateType": "OFFOLLOWINGMONTH", "StartDate": "\/Date(1555286400000+0000)\/" }, "Type": "ACCREC", "Reference": "[Week]", "ApprovedForSending": false, "SendCopy": false, "MarkAsSent": false, "IncludePDF": false, "Contact": { "ContactID": "430fa14a-f945-44d3-9f97-5df5e28441b8", "Name": "Liam Gallagher" }, "Status": "AUTHORISED", "LineAmountTypes": "Exclusive", "LineItems": [ { "Description": "Guitars Fender Strat", "UnitAmount": 5000.00, "TaxType": "OUTPUT2", "TaxAmount": 750.00, "LineAmount": 5000.00, "AccountCode": "200", "Tracking": [], "Quantity": 1.0000, "LineItemID": "13a8353c-d2af-4d5b-920c-438449f08900", "DiscountEnteredAsPercent": true } ], "CurrencyCode": "NZD" } ] } */
                "application/json": components["schemas"]["RepeatingInvoices"];
            };
        };
        responses: {
            /** @description Success - return response of type RepeatingInvoices array with newly created RepeatingInvoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepeatingInvoices"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateOrCreateRepeatingInvoices: {
        parameters: {
            query?: {
                /**
                 * @description If false return 200 OK and mix of successfully created objects and any with validation errors
                 * @example true
                 */
                summarizeErrors?: components["parameters"]["summarizeErrors"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description RepeatingInvoices with an array of repeating invoice objects in body of request */
        requestBody: {
            content: {
                /** @example { "RepeatingInvoices": [ { "Schedule": { "Period": 1, "Unit": "MONTHLY", "DueDate": 10, "DueDateType": "OFFOLLOWINGMONTH", "StartDate": "\/Date(1555286400000+0000)\/" }, "Type": "ACCREC", "Reference": "[Week]", "ApprovedForSending": false, "SendCopy": false, "MarkAsSent": false, "IncludePDF": false, "Contact": { "ContactID": "430fa14a-f945-44d3-9f97-5df5e28441b8", "Name": "Liam Gallagher" }, "Status": "AUTHORISED", "LineAmountTypes": "Exclusive", "LineItems": [ { "Description": "Guitars Fender Strat", "UnitAmount": 5000.00, "TaxType": "OUTPUT2", "TaxAmount": 750.00, "LineAmount": 5000.00, "AccountCode": "200", "Tracking": [], "Quantity": 1.0000, "LineItemID": "13a8353c-d2af-4d5b-920c-438449f08900", "DiscountEnteredAsPercent": true } ], "CurrencyCode": "NZD" } ] } */
                "application/json": components["schemas"]["RepeatingInvoices"];
            };
        };
        responses: {
            /** @description Success - return response of type RepeatingInvoices array with newly created RepeatingInvoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepeatingInvoices"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getRepeatingInvoice: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Repeating Invoices array with a specified Repeating Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepeatingInvoices"];
                };
            };
        };
    };
    updateRepeatingInvoice: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Schedule": { "Period": 1, "Unit": "MONTHLY", "DueDate": 10, "DueDateType": "OFFOLLOWINGMONTH", "StartDate": "\/Date(1555286400000+0000)\/", "EndDate": "\/Date(1569801600000+0000)\/", "NextScheduledDate": "\/Date(1555286400000+0000)\/" }, "RepeatingInvoiceID": "428c0d75-909f-4b04-8403-a48dc27283b0", "Type": "ACCREC", "Reference": "[Week]", "HasAttachments": true, "ApprovedForSending": false, "SendCopy": false, "MarkAsSent": false, "IncludePDF": false, "ID": "428c0d75-909f-4b04-8403-a48dc27283b0", "Contact": { "ContactID": "430fa14a-f945-44d3-9f97-5df5e28441b8", "Name": "Liam Gallagher", "Addresses": [], "Phones": [], "ContactGroups": [], "ContactPersons": [], "HasValidationErrors": false }, "Status": "DELETED", "LineAmountTypes": "Exclusive", "LineItems": [ { "Description": "Guitars Fender Strat", "UnitAmount": 5000.00, "TaxType": "OUTPUT2", "TaxAmount": 750.00, "LineAmount": 5000.00, "AccountCode": "200", "Tracking": [], "Quantity": 1.0000, "LineItemID": "13a8353c-d2af-4d5b-920c-438449f08900", "DiscountEnteredAsPercent": true } ], "SubTotal": 5000.00, "TotalTax": 750.00, "Total": 5750.00, "CurrencyCode": "NZD" } */
                "application/json": components["schemas"]["RepeatingInvoices"];
            };
        };
        responses: {
            /** @description Success - return response of type RepeatingInvoices array with deleted Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RepeatingInvoices"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getRepeatingInvoiceAttachments: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Attachments array with all Attachments for a specified Repeating Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
        };
    };
    getRepeatingInvoiceAttachmentById: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
                /**
                 * @description Unique identifier for Attachment object
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                AttachmentID: components["parameters"]["AttachmentID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Repeating Invoice as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    getRepeatingInvoiceAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
                 * @example image/jpg
                 */
                contentType: components["parameters"]["ContentType"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of attachment for Repeating Invoice as binary data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    createRepeatingInvoiceAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with updated Attachment for a specified Repeating Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateRepeatingInvoiceAttachmentByFileName: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
                /**
                 * @description Name of the attachment
                 * @example xero-dev.jpg
                 */
                FileName: components["parameters"]["FileName"];
            };
            cookie?: never;
        };
        /** @description Byte array of file in body of request */
        requestBody: {
            content: {
                "application/octet-stream": string;
            };
        };
        responses: {
            /** @description Success - return response of type Attachments array with specified Attachment for a specified Repeating Invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Attachments"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getRepeatingInvoiceHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["HistoryRetrieved"];
        };
    };
    createRepeatingInvoiceHistory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a Repeating Invoice
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                RepeatingInvoiceID: components["parameters"]["RepeatingInvoiceID"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["historyRecords"];
        responses: {
            200: components["responses"]["HistoryRecordCreated"];
            400: components["responses"]["400Error"];
        };
    };
    getReportTenNinetyNine: {
        parameters: {
            query?: {
                /**
                 * @description The year of the 1099 report
                 * @example 2019
                 */
                reportYear?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Reports */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reports"];
                };
            };
        };
    };
    getReportAgedPayablesByContact: {
        parameters: {
            query: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                contactId: string;
                /**
                 * @description The date of the Aged Payables By Contact report
                 * @example 2019-10-31
                 */
                date?: string;
                /**
                 * @description filter by the from date of the report e.g. 2021-02-01
                 * @example 2019-10-31
                 */
                fromDate?: components["parameters"]["FromDate"];
                /**
                 * @description filter by the to date of the report e.g. 2021-02-28
                 * @example 2019-10-31
                 */
                toDate?: components["parameters"]["ToDate"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportAgedReceivablesByContact: {
        parameters: {
            query: {
                /**
                 * @description Unique identifier for a Contact
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                contactId: string;
                /**
                 * @description The date of the Aged Receivables By Contact report
                 * @example 2019-10-31
                 */
                date?: string;
                /**
                 * @description filter by the from date of the report e.g. 2021-02-01
                 * @example 2019-10-31
                 */
                fromDate?: components["parameters"]["FromDate"];
                /**
                 * @description filter by the to date of the report e.g. 2021-02-28
                 * @example 2019-10-31
                 */
                toDate?: components["parameters"]["ToDate"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportBalanceSheet: {
        parameters: {
            query?: {
                /**
                 * @description The date of the Balance Sheet report
                 * @example 2019-11-01
                 */
                date?: string;
                /**
                 * @description The number of periods for the Balance Sheet report
                 * @example 3
                 */
                periods?: number;
                /**
                 * @description The period size to compare to (MONTH, QUARTER, YEAR)
                 * @example MONTH
                 */
                timeframe?: "MONTH" | "QUARTER" | "YEAR";
                /**
                 * @description The tracking option 1 for the Balance Sheet report
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                trackingOptionID1?: string;
                /**
                 * @description The tracking option 2 for the Balance Sheet report
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                trackingOptionID2?: string;
                /**
                 * @description The standard layout boolean for the Balance Sheet report
                 * @example true
                 */
                standardLayout?: boolean;
                /**
                 * @description return a cash basis for the Balance Sheet report
                 * @example false
                 */
                paymentsOnly?: boolean;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportBankSummary: {
        parameters: {
            query?: {
                /**
                 * @description filter by the from date of the report e.g. 2021-02-01
                 * @example 2019-10-31
                 */
                fromDate?: components["parameters"]["FromDate"];
                /**
                 * @description filter by the to date of the report e.g. 2021-02-28
                 * @example 2019-10-31
                 */
                toDate?: components["parameters"]["ToDate"];
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportFromId: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a Report
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                ReportID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportBudgetSummary: {
        parameters: {
            query?: {
                /**
                 * @description The date for the Bank Summary report e.g. 2018-03-31
                 * @example 2019-03-31
                 */
                date?: string;
                /**
                 * @description The number of periods to compare (integer between 1 and 12)
                 * @example 2
                 */
                periods?: number;
                /**
                 * @description The period size to compare to (1=month, 3=quarter, 12=year)
                 * @example 3
                 */
                timeframe?: number;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description success- return a Report with Rows object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportExecutiveSummary: {
        parameters: {
            query?: {
                /**
                 * @description The date for the Bank Summary report e.g. 2018-03-31
                 * @example 2019-03-31
                 */
                date?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportsList: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportProfitAndLoss: {
        parameters: {
            query?: {
                /**
                 * @description filter by the from date of the report e.g. 2021-02-01
                 * @example 2019-10-31
                 */
                fromDate?: components["parameters"]["FromDate"];
                /**
                 * @description filter by the to date of the report e.g. 2021-02-28
                 * @example 2019-10-31
                 */
                toDate?: components["parameters"]["ToDate"];
                /**
                 * @description The number of periods to compare (integer between 1 and 12)
                 * @example 3
                 */
                periods?: number;
                /**
                 * @description The period size to compare to (MONTH, QUARTER, YEAR)
                 * @example MONTH
                 */
                timeframe?: "MONTH" | "QUARTER" | "YEAR";
                /**
                 * @description The trackingCategory 1 for the ProfitAndLoss report
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                trackingCategoryID?: string;
                /**
                 * @description The trackingCategory 2 for the ProfitAndLoss report
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                trackingCategoryID2?: string;
                /**
                 * @description The tracking option 1 for the ProfitAndLoss report
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                trackingOptionID?: string;
                /**
                 * @description The tracking option 2 for the ProfitAndLoss report
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                trackingOptionID2?: string;
                /**
                 * @description Return the standard layout for the ProfitAndLoss report
                 * @example true
                 */
                standardLayout?: boolean;
                /**
                 * @description Return cash only basis for the ProfitAndLoss report
                 * @example false
                 */
                paymentsOnly?: boolean;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    getReportTrialBalance: {
        parameters: {
            query?: {
                /**
                 * @description The date for the Trial Balance report e.g. 2018-03-31
                 * @example 2019-10-31
                 */
                date?: string;
                /**
                 * @description Return cash only basis for the Trial Balance report
                 * @example true
                 */
                paymentsOnly?: boolean;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type ReportWithRows */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportWithRows"];
                };
            };
        };
    };
    postSetup: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Object including an accounts array, a conversion balances array and a conversion date object in body of request */
        requestBody: {
            content: {
                /** @example { "ConversionDate": {}, "ConversionBalances": [], "Accounts": [ { "Code": "200", "Name": "Sales", "Type": "SALES", "ReportingCode": "REV.TRA.GOO" }, { "Code": "400", "Name": "Advertising", "Type": "OVERHEADS", "ReportingCode": "EXP" }, { "Code": "610", "Name": "Accounts Receivable", "Type": "CURRENT", "SystemAccount": "DEBTORS", "ReportingCode": "ASS.CUR.REC.TRA" }, { "Code": "800", "Name": "Accounts Payable", "Type": "CURRLIAB", "SystemAccount": "CREDITORS", "ReportingCode": "LIA.CUR.PAY" } ] } */
                "application/json": components["schemas"]["Setup"];
            };
        };
        responses: {
            /** @description Success - returns a summary of the chart of accounts updates */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportSummaryObject"];
                };
            };
        };
    };
    getTaxRates: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="ACTIVE"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Name ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type TaxRates array with TaxRates */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxRates"];
                };
            };
        };
    };
    createTaxRates: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description TaxRates array with TaxRate object in body of request */
        requestBody: {
            content: {
                /** @example { "TaxRates": [ { "Name": "CA State Tax", "TaxComponents": [ { "Name": "State Tax", "Rate": 2.25 } ] } ] } */
                "application/json": components["schemas"]["TaxRates"];
            };
        };
        responses: {
            /** @description Success - return response of type TaxRates array newly created TaxRate */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxRates"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateTaxRate: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "TaxRates": [ { "Name": "State Tax NY", "TaxComponents": [ { "Name": "State Tax", "Rate": 2.25 } ], "Status": "DELETED", "ReportTaxType": "INPUT" } ] } */
                "application/json": components["schemas"]["TaxRates"];
            };
        };
        responses: {
            /** @description Success - return response of type TaxRates array updated TaxRate */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxRates"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getTaxRateByTaxType: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description A valid TaxType code
                 * @example INPUT2
                 */
                TaxType: components["parameters"]["TaxType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type TaxRates array with one TaxRate */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxRates"];
                };
            };
        };
    };
    getTrackingCategories: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example Status=="ACTIVE"
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example Name ASC
                 */
                order?: string;
                /**
                 * @description e.g. includeArchived=true - Categories and options with a status of ARCHIVED will be included in the response
                 * @example true
                 */
                includeArchived?: boolean;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type TrackingCategories array of TrackingCategory */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingCategories"];
                };
            };
        };
    };
    createTrackingCategory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description TrackingCategory object in body of request */
        requestBody: {
            content: {
                /** @example { name: "FooBar" } */
                "application/json": components["schemas"]["TrackingCategory"];
            };
        };
        responses: {
            /** @description Success - return response of type TrackingCategories array of newly created TrackingCategory */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingCategories"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getTrackingCategory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a TrackingCategory
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TrackingCategoryID: components["parameters"]["TrackingCategoryID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type TrackingCategories array of specified TrackingCategory */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingCategories"];
                };
            };
        };
    };
    updateTrackingCategory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a TrackingCategory
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TrackingCategoryID: components["parameters"]["TrackingCategoryID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { "Name": "Avengers" } */
                "application/json": components["schemas"]["TrackingCategory"];
            };
        };
        responses: {
            /** @description Success - return response of type TrackingCategories array of updated TrackingCategory */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingCategories"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    deleteTrackingCategory: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a TrackingCategory
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TrackingCategoryID: components["parameters"]["TrackingCategoryID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type TrackingCategories array of deleted TrackingCategory */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingCategories"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    createTrackingOptions: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a TrackingCategory
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TrackingCategoryID: components["parameters"]["TrackingCategoryID"];
            };
            cookie?: never;
        };
        /** @description TrackingOption object in body of request */
        requestBody: {
            content: {
                /** @example { name: " Bar" } */
                "application/json": components["schemas"]["TrackingOption"];
            };
        };
        responses: {
            /** @description Success - return response of type TrackingOptions array of options for a specified category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingOptions"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    updateTrackingOptions: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
                 * @example KEY_VALUE
                 */
                "Idempotency-Key"?: components["parameters"]["idempotencyKey"];
            };
            path: {
                /**
                 * @description Unique identifier for a TrackingCategory
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TrackingCategoryID: components["parameters"]["TrackingCategoryID"];
                /**
                 * @description Unique identifier for a Tracking Option
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TrackingOptionID: components["parameters"]["TrackingOptionID"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example { name: "Vision" } */
                "application/json": components["schemas"]["TrackingOption"];
            };
        };
        responses: {
            /** @description Success - return response of type TrackingOptions array of options for a specified category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingOptions"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    deleteTrackingOptions: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a TrackingCategory
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TrackingCategoryID: components["parameters"]["TrackingCategoryID"];
                /**
                 * @description Unique identifier for a Tracking Option
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                TrackingOptionID: components["parameters"]["TrackingOptionID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type TrackingOptions array of remaining options for a specified category */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TrackingOptions"];
                };
            };
            400: components["responses"]["400Error"];
        };
    };
    getUsers: {
        parameters: {
            query?: {
                /**
                 * @description Filter by an any element
                 * @example IsSubscriber==true
                 */
                where?: string;
                /**
                 * @description Order by an any element
                 * @example LastName ASC
                 */
                order?: string;
            };
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
                /**
                 * @description Only records created or modified since this timestamp will be returned
                 * @example 2020-02-06T12:17:43.202-08:00
                 */
                "If-Modified-Since"?: components["parameters"]["ifModifiedSince"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Users array of all User */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users"];
                };
            };
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Xero identifier for Tenant
                 * @example YOUR_XERO_TENANT_ID
                 */
                "xero-tenant-id": components["parameters"]["requiredHeader"];
            };
            path: {
                /**
                 * @description Unique identifier for a User
                 * @example 00000000-0000-0000-0000-000000000000
                 */
                UserID: components["parameters"]["UserID"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - return response of type Users array of specified User */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Users"];
                };
            };
        };
    };
}
